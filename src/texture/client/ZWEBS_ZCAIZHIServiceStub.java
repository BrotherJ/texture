
/**
 * ZWEBS_ZCAIZHIServiceStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.4.1  Built on : Aug 19, 2008 (10:13:39 LKT)
 */
        package texture.client;

        

        /*
        *  ZWEBS_ZCAIZHIServiceStub java implementation
        */

        
        public class ZWEBS_ZCAIZHIServiceStub extends org.apache.axis2.client.Stub
        {
        protected org.apache.axis2.description.AxisOperation[] _operations;

        //hashmaps to keep the fault mapping
        private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
        private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
        private java.util.HashMap faultMessageMap = new java.util.HashMap();

        private static int counter = 0;

        private static synchronized String getUniqueSuffix(){
            // reset the counter if it is greater than 99999
            if (counter > 99999){
                counter = 0;
            }
            counter = counter + 1; 
            return Long.toString(System.currentTimeMillis()) + "_" + counter;
        }

    
    private void populateAxisService() throws org.apache.axis2.AxisFault {

     //creating the Service with a unique name
     _service = new org.apache.axis2.description.AxisService("ZWEBS_ZCAIZHIService" + getUniqueSuffix());
//     addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[1];
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:sap-com:document:sap:rfc:functions", "ZWEBS_ZCAIZHI"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[0]=__operation;
            
        
        }

    //populates the faults
    private void populateFaults(){
         


    }

    /**
      *Constructor that takes in a configContext
      */

    public ZWEBS_ZCAIZHIServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
       java.lang.String targetEndpoint)
       throws org.apache.axis2.AxisFault {
         this(configurationContext,targetEndpoint,false);
   }


   /**
     * Constructor that takes in a configContext  and useseperate listner
     */
   public ZWEBS_ZCAIZHIServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
         //To populate AxisService
         populateAxisService();
         populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,_service);
        
	
        configurationContext = _serviceClient.getServiceContext().getConfigurationContext();

        _serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
        
    
    }

    /**
     * Default Constructor
     */
    public ZWEBS_ZCAIZHIServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault {
        
                    this(configurationContext,"http://ERPPRD3.neway.com.cn:8000/sap/bc/srt/rfc/sap/zwebs_zcaizhi/800/zwebs_zcaizhiservice/zwebs_zcaizhi" );
                
    }

    /**
     * Default Constructor
     */
    public ZWEBS_ZCAIZHIServiceStub() throws org.apache.axis2.AxisFault {
        
                    this("http://ERPPRD3.neway.com.cn:8000/sap/bc/srt/rfc/sap/zwebs_zcaizhi/800/zwebs_zcaizhiservice/zwebs_zcaizhi" );
                
    }

    /**
     * Constructor taking the target endpoint
     */
    public ZWEBS_ZCAIZHIServiceStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(null,targetEndpoint);
    }



        
                    /**
                     * Auto generated method signature
                     * 
                     * @see ZWEBS_ZCAIZHIService#ZWEBS_ZCAIZHI
                     * @param zWEBS_ZCAIZHI0
                    
                     */

                    

                            public  ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHIResponse ZWEBS_ZCAIZHI(

                            ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHI zWEBS_ZCAIZHI0)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
              _operationClient.getOptions().setAction("\"\"");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    zWEBS_ZCAIZHI0,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:sap-com:document:sap:rfc:functions",
                                                    "ZWEBS_ZCAIZHI")));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHIResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHIResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(faultElt.getQName())){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex=
                                (java.lang.Exception) exceptionClass.newInstance();
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see ZWEBS_ZCAIZHIService#startZWEBS_ZCAIZHI
                    * @param zWEBS_ZCAIZHI0
                
                */
                public  void startZWEBS_ZCAIZHI(

                 ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHI zWEBS_ZCAIZHI0,

                  final ZWEBS_ZCAIZHIServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
             _operationClient.getOptions().setAction("\"\"");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    zWEBS_ZCAIZHI0,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:sap-com:document:sap:rfc:functions",
                                                    "ZWEBS_ZCAIZHI")));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHIResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultZWEBS_ZCAIZHI(
                                        (ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHIResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorZWEBS_ZCAIZHI(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorZWEBS_ZCAIZHI(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorZWEBS_ZCAIZHI(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorZWEBS_ZCAIZHI(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorZWEBS_ZCAIZHI(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorZWEBS_ZCAIZHI(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorZWEBS_ZCAIZHI(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorZWEBS_ZCAIZHI(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorZWEBS_ZCAIZHI(f);
                                            }
									    } else {
										    callback.receiveErrorZWEBS_ZCAIZHI(f);
									    }
									} else {
									    callback.receiveErrorZWEBS_ZCAIZHI(f);
									}
								} else {
								    callback.receiveErrorZWEBS_ZCAIZHI(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorZWEBS_ZCAIZHI(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[0].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[0].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                


       /**
        *  A utility method that copies the namepaces from the SOAPEnvelope
        */
       private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env){
        java.util.Map returnMap = new java.util.HashMap();
        java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
        while (namespaceIterator.hasNext()) {
            org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
            returnMap.put(ns.getPrefix(),ns.getNamespaceURI());
        }
       return returnMap;
    }

    
    
    private javax.xml.namespace.QName[] opNameArray = null;
    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        

        if (opNameArray == null) {
            return false;
        }
        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;   
            }
        }
        return false;
    }
     //http://ERPPRD3.neway.com.cn:8000/sap/bc/srt/rfc/sap/zwebs_zcaizhi/800/zwebs_zcaizhiservice/zwebs_zcaizhi
        public static class Char1
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "char1",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Char1
                        */

                        
                                    protected java.lang.String localChar1 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChar1(){
                               return localChar1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Char1
                               */
                               public void setChar1(java.lang.String param){
                            
                                            if (  (java.lang.String.valueOf(param).length() <= 1)  ) {
                                                this.localChar1=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localChar1.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Char1.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":char1",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "char1",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localChar1==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localChar1);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChar1)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Char1 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Char1 returnValue = new  Char1();
                    
                            returnValue.setChar1(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Char1 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Char1.Factory.fromString(content,namespaceUri);
                    } else {
                       return Char1.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Char1 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Char1 object =
                new Char1();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChar1(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Char21
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "char21",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Char21
                        */

                        
                                    protected java.lang.String localChar21 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChar21(){
                               return localChar21;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Char21
                               */
                               public void setChar21(java.lang.String param){
                            
                                            if (  (java.lang.String.valueOf(param).length() <= 21)  ) {
                                                this.localChar21=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localChar21.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Char21.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":char21",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "char21",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localChar21==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localChar21);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChar21)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Char21 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Char21 returnValue = new  Char21();
                    
                            returnValue.setChar21(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Char21 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Char21.Factory.fromString(content,namespaceUri);
                    } else {
                       return Char21.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Char21 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Char21 object =
                new Char21();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChar21(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Char20
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "char20",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Char20
                        */

                        
                                    protected java.lang.String localChar20 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChar20(){
                               return localChar20;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Char20
                               */
                               public void setChar20(java.lang.String param){
                            
                                            if (  (java.lang.String.valueOf(param).length() <= 20)  ) {
                                                this.localChar20=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localChar20.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Char20.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":char20",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "char20",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localChar20==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localChar20);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChar20)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Char20 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Char20 returnValue = new  Char20();
                    
                            returnValue.setChar20(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Char20 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Char20.Factory.fromString(content,namespaceUri);
                    } else {
                       return Char20.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Char20 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Char20 object =
                new Char20();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChar20(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Char10
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "char10",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Char10
                        */

                        
                                    protected java.lang.String localChar10 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChar10(){
                               return localChar10;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Char10
                               */
                               public void setChar10(java.lang.String param){
                            
                                            if (  (java.lang.String.valueOf(param).length() <= 10)  ) {
                                                this.localChar10=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localChar10.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Char10.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":char10",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "char10",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localChar10==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localChar10);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChar10)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Char10 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Char10 returnValue = new  Char10();
                    
                            returnValue.setChar10(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Char10 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Char10.Factory.fromString(content,namespaceUri);
                    } else {
                       return Char10.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Char10 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Char10 object =
                new Char10();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChar10(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Char2
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "char2",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Char2
                        */

                        
                                    protected java.lang.String localChar2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChar2(){
                               return localChar2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Char2
                               */
                               public void setChar2(java.lang.String param){
                            
                                            if (  (java.lang.String.valueOf(param).length() <= 2)  ) {
                                                this.localChar2=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localChar2.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Char2.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":char2",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "char2",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localChar2==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localChar2);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChar2)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Char2 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Char2 returnValue = new  Char2();
                    
                            returnValue.setChar2(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Char2 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Char2.Factory.fromString(content,namespaceUri);
                    } else {
                       return Char2.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Char2 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Char2 object =
                new Char2();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChar2(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Char40
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "char40",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Char40
                        */

                        
                                    protected java.lang.String localChar40 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChar40(){
                               return localChar40;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Char40
                               */
                               public void setChar40(java.lang.String param){
                            
                                            if (  (java.lang.String.valueOf(param).length() <= 40)  ) {
                                                this.localChar40=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localChar40.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Char40.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":char40",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "char40",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localChar40==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localChar40);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChar40)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Char40 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Char40 returnValue = new  Char40();
                    
                            returnValue.setChar40(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Char40 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Char40.Factory.fromString(content,namespaceUri);
                    } else {
                       return Char40.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Char40 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Char40 object =
                new Char40();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChar40(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Char25
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "char25",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Char25
                        */

                        
                                    protected java.lang.String localChar25 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChar25(){
                               return localChar25;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Char25
                               */
                               public void setChar25(java.lang.String param){
                            
                                            if (  (java.lang.String.valueOf(param).length() <= 25)  ) {
                                                this.localChar25=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localChar25.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Char25.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":char25",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "char25",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localChar25==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localChar25);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChar25)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Char25 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Char25 returnValue = new  Char25();
                    
                            returnValue.setChar25(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Char25 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Char25.Factory.fromString(content,namespaceUri);
                    } else {
                       return Char25.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Char25 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Char25 object =
                new Char25();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChar25(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Char15
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "char15",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Char15
                        */

                        
                                    protected java.lang.String localChar15 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChar15(){
                               return localChar15;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Char15
                               */
                               public void setChar15(java.lang.String param){
                            
                                            if (  (java.lang.String.valueOf(param).length() <= 15)  ) {
                                                this.localChar15=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localChar15.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Char15.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":char15",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "char15",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localChar15==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localChar15);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChar15)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Char15 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Char15 returnValue = new  Char15();
                    
                            returnValue.setChar15(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Char15 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Char15.Factory.fromString(content,namespaceUri);
                    } else {
                       return Char15.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Char15 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Char15 object =
                new Char15();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChar15(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Char50
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "char50",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Char50
                        */

                        
                                    protected java.lang.String localChar50 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChar50(){
                               return localChar50;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Char50
                               */
                               public void setChar50(java.lang.String param){
                            
                                            if (  (java.lang.String.valueOf(param).length() <= 50)  ) {
                                                this.localChar50=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localChar50.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Char50.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":char50",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "char50",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localChar50==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localChar50);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChar50)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Char50 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Char50 returnValue = new  Char50();
                    
                            returnValue.setChar50(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Char50 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Char50.Factory.fromString(content,namespaceUri);
                    } else {
                       return Char50.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Char50 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Char50 object =
                new Char50();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChar50(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class TABLE_OF_ZZCAIZHI
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TABLE_OF_ZZCAIZHI
                Namespace URI = urn:sap-com:document:sap:rfc:functions
                Namespace Prefix = ns1
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Item
                        * This was an Array!
                        */

                        
                                    protected ZZCAIZHI[] localItem ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localItemTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return ZZCAIZHI[]
                           */
                           public  ZZCAIZHI[] getItem(){
                               return localItem;
                           }

                           
                        


                               
                              /**
                               * validate the array for Item
                               */
                              protected void validateItem(ZZCAIZHI[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param Item
                              */
                              public void setItem(ZZCAIZHI[] param){
                              
                                   validateItem(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localItemTracker = true;
                                          } else {
                                             localItemTracker = false;
                                                 
                                          }
                                      
                                      this.localItem=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param ZZCAIZHI
                             */
                             public void addItem(ZZCAIZHI param){
                                   if (localItem == null){
                                   localItem = new ZZCAIZHI[]{};
                                   }

                            
                                 //update the setting tracker
                                localItemTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localItem);
                               list.add(param);
                               this.localItem =
                             (ZZCAIZHI[])list.toArray(
                            new ZZCAIZHI[list.size()]);

                             }
                             

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       TABLE_OF_ZZCAIZHI.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":TABLE_OF_ZZCAIZHI",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "TABLE_OF_ZZCAIZHI",
                           xmlWriter);
                   }

               
                   }
                if (localItemTracker){
                                       if (localItem!=null){
                                            for (int i = 0;i < localItem.length;i++){
                                                if (localItem[i] != null){
                                                 localItem[i].serialize(new javax.xml.namespace.QName("","item"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                        // we don't have to do any thing since minOccures is zero
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");
                                        
                                    }
                                 }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localItemTracker){
                             if (localItem!=null) {
                                 for (int i = 0;i < localItem.length;i++){

                                    if (localItem[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("",
                                                                          "item"));
                                         elementList.add(localItem[i]);
                                    } else {
                                        
                                                // nothing to do
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static TABLE_OF_ZZCAIZHI parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            TABLE_OF_ZZCAIZHI object =
                new TABLE_OF_ZZCAIZHI();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"TABLE_OF_ZZCAIZHI".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TABLE_OF_ZZCAIZHI)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","item").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(ZZCAIZHI.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("","item").equals(reader.getName())){
                                                                    list1.add(ZZCAIZHI.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setItem((ZZCAIZHI[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                ZZCAIZHI.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Char17
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "char17",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Char17
                        */

                        
                                    protected java.lang.String localChar17 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChar17(){
                               return localChar17;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Char17
                               */
                               public void setChar17(java.lang.String param){
                            
                                            if (  (java.lang.String.valueOf(param).length() <= 17)  ) {
                                                this.localChar17=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localChar17.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Char17.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":char17",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "char17",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localChar17==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localChar17);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChar17)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Char17 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Char17 returnValue = new  Char17();
                    
                            returnValue.setChar17(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Char17 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Char17.Factory.fromString(content,namespaceUri);
                    } else {
                       return Char17.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Char17 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Char17 object =
                new Char17();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChar17(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Clnt3
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "clnt3",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Clnt3
                        */

                        
                                    protected java.lang.String localClnt3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getClnt3(){
                               return localClnt3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Clnt3
                               */
                               public void setClnt3(java.lang.String param){
                            
                                            if (  (java.lang.String.valueOf(param).length() <= 3)  ) {
                                                this.localClnt3=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localClnt3.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Clnt3.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":clnt3",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "clnt3",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localClnt3==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localClnt3);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClnt3)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Clnt3 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Clnt3 returnValue = new  Clnt3();
                    
                            returnValue.setClnt3(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Clnt3 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Clnt3.Factory.fromString(content,namespaceUri);
                    } else {
                       return Clnt3.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Clnt3 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Clnt3 object =
                new Clnt3();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setClnt3(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ZWEBS_ZCAIZHIResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "ZWEBS_ZCAIZHIResponse",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for L_MSG
                        */

                        
                                    protected Char10 localL_MSG ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char10
                           */
                           public  Char10 getL_MSG(){
                               return localL_MSG;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param L_MSG
                               */
                               public void setL_MSG(Char10 param){
                            
                                            this.localL_MSG=param;
                                    

                               }
                            

                        /**
                        * field for ZMTR_CODE
                        */

                        
                                    protected TABLE_OF_ZMTR_CODE localZMTR_CODE ;
                                

                           /**
                           * Auto generated getter method
                           * @return TABLE_OF_ZMTR_CODE
                           */
                           public  TABLE_OF_ZMTR_CODE getZMTR_CODE(){
                               return localZMTR_CODE;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZMTR_CODE
                               */
                               public void setZMTR_CODE(TABLE_OF_ZMTR_CODE param){
                            
                                            this.localZMTR_CODE=param;
                                    

                               }
                            

                        /**
                        * field for ZMTR_ZCAIZHI
                        */

                        
                                    protected TABLE_OF_ZZCAIZHI localZMTR_ZCAIZHI ;
                                

                           /**
                           * Auto generated getter method
                           * @return TABLE_OF_ZZCAIZHI
                           */
                           public  TABLE_OF_ZZCAIZHI getZMTR_ZCAIZHI(){
                               return localZMTR_ZCAIZHI;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZMTR_ZCAIZHI
                               */
                               public void setZMTR_ZCAIZHI(TABLE_OF_ZZCAIZHI param){
                            
                                            this.localZMTR_ZCAIZHI=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ZWEBS_ZCAIZHIResponse.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ZWEBS_ZCAIZHIResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ZWEBS_ZCAIZHIResponse",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localL_MSG==null){
                                                 throw new org.apache.axis2.databinding.ADBException("L_MSG cannot be null!!");
                                            }
                                           localL_MSG.serialize(new javax.xml.namespace.QName("","L_MSG"),
                                               factory,xmlWriter);
                                        
                                            if (localZMTR_CODE==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZMTR_CODE cannot be null!!");
                                            }
                                           localZMTR_CODE.serialize(new javax.xml.namespace.QName("","ZMTR_CODE"),
                                               factory,xmlWriter);
                                        
                                            if (localZMTR_ZCAIZHI==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZMTR_ZCAIZHI cannot be null!!");
                                            }
                                           localZMTR_ZCAIZHI.serialize(new javax.xml.namespace.QName("","ZMTR_ZCAIZHI"),
                                               factory,xmlWriter);
                                        
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "L_MSG"));
                            
                            
                                    if (localL_MSG==null){
                                         throw new org.apache.axis2.databinding.ADBException("L_MSG cannot be null!!");
                                    }
                                    elementList.add(localL_MSG);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZMTR_CODE"));
                            
                            
                                    if (localZMTR_CODE==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZMTR_CODE cannot be null!!");
                                    }
                                    elementList.add(localZMTR_CODE);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZMTR_ZCAIZHI"));
                            
                            
                                    if (localZMTR_ZCAIZHI==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZMTR_ZCAIZHI cannot be null!!");
                                    }
                                    elementList.add(localZMTR_ZCAIZHI);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ZWEBS_ZCAIZHIResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ZWEBS_ZCAIZHIResponse object =
                new ZWEBS_ZCAIZHIResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ZWEBS_ZCAIZHIResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ZWEBS_ZCAIZHIResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","L_MSG").equals(reader.getName())){
                                
                                                object.setL_MSG(Char10.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZMTR_CODE").equals(reader.getName())){
                                
                                                object.setZMTR_CODE(TABLE_OF_ZMTR_CODE.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZMTR_ZCAIZHI").equals(reader.getName())){
                                
                                                object.setZMTR_ZCAIZHI(TABLE_OF_ZZCAIZHI.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ZZCAIZHI
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ZZCAIZHI
                Namespace URI = urn:sap-com:document:sap:rfc:functions
                Namespace Prefix = ns1
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for MANDT
                        */

                        
                                    protected Clnt3 localMANDT ;
                                

                           /**
                           * Auto generated getter method
                           * @return Clnt3
                           */
                           public  Clnt3 getMANDT(){
                               return localMANDT;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MANDT
                               */
                               public void setMANDT(Clnt3 param){
                            
                                            this.localMANDT=param;
                                    

                               }
                            

                        /**
                        * field for ZCZ
                        */

                        
                                    protected Char25 localZCZ ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char25
                           */
                           public  Char25 getZCZ(){
                               return localZCZ;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZCZ
                               */
                               public void setZCZ(Char25 param){
                            
                                            this.localZCZ=param;
                                    

                               }
                            

                        /**
                        * field for VBELN
                        */

                        
                                    protected Char10 localVBELN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char10
                           */
                           public  Char10 getVBELN(){
                               return localVBELN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param VBELN
                               */
                               public void setVBELN(Char10 param){
                            
                                            this.localVBELN=param;
                                    

                               }
                            

                        /**
                        * field for POSNR
                        */

                        
                                    protected Numeric6 localPOSNR ;
                                

                           /**
                           * Auto generated getter method
                           * @return Numeric6
                           */
                           public  Numeric6 getPOSNR(){
                               return localPOSNR;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param POSNR
                               */
                               public void setPOSNR(Numeric6 param){
                            
                                            this.localPOSNR=param;
                                    

                               }
                            

                        /**
                        * field for STD
                        */

                        
                                    protected Char1 localSTD ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char1
                           */
                           public  Char1 getSTD(){
                               return localSTD;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param STD
                               */
                               public void setSTD(Char1 param){
                            
                                            this.localSTD=param;
                                    

                               }
                            

                        /**
                        * field for SPECIFICATE
                        */

                        
                                    protected Char40 localSPECIFICATE ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char40
                           */
                           public  Char40 getSPECIFICATE(){
                               return localSPECIFICATE;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SPECIFICATE
                               */
                               public void setSPECIFICATE(Char40 param){
                            
                                            this.localSPECIFICATE=param;
                                    

                               }
                            

                        /**
                        * field for CE
                        */

                        
                                    protected Char2 localCE ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char2
                           */
                           public  Char2 getCE(){
                               return localCE;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CE
                               */
                               public void setCE(Char2 param){
                            
                                            this.localCE=param;
                                    

                               }
                            

                        /**
                        * field for PREN
                        */

                        
                                    protected Char2 localPREN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char2
                           */
                           public  Char2 getPREN(){
                               return localPREN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PREN
                               */
                               public void setPREN(Char2 param){
                            
                                            this.localPREN=param;
                                    

                               }
                            

                        /**
                        * field for ZDEL
                        */

                        
                                    protected Char1 localZDEL ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char1
                           */
                           public  Char1 getZDEL(){
                               return localZDEL;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZDEL
                               */
                               public void setZDEL(Char1 param){
                            
                                            this.localZDEL=param;
                                    

                               }
                            

                        /**
                        * field for CDATE
                        */

                        
                                    protected Date10 localCDATE ;
                                

                           /**
                           * Auto generated getter method
                           * @return Date10
                           */
                           public  Date10 getCDATE(){
                               return localCDATE;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CDATE
                               */
                               public void setCDATE(Date10 param){
                            
                                            this.localCDATE=param;
                                    

                               }
                            

                        /**
                        * field for MDATE
                        */

                        
                                    protected Date10 localMDATE ;
                                

                           /**
                           * Auto generated getter method
                           * @return Date10
                           */
                           public  Date10 getMDATE(){
                               return localMDATE;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MDATE
                               */
                               public void setMDATE(Date10 param){
                            
                                            this.localMDATE=param;
                                    

                               }
                            

                        /**
                        * field for CUSER
                        */

                        
                                    protected Char20 localCUSER ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getCUSER(){
                               return localCUSER;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CUSER
                               */
                               public void setCUSER(Char20 param){
                            
                                            this.localCUSER=param;
                                    

                               }
                            

                        /**
                        * field for MUSER
                        */

                        
                                    protected Char20 localMUSER ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getMUSER(){
                               return localMUSER;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MUSER
                               */
                               public void setMUSER(Char20 param){
                            
                                            this.localMUSER=param;
                                    

                               }
                            

                        /**
                        * field for C_MIN
                        */

                        
                                    protected Quantum183 localC_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getC_MIN(){
                               return localC_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param C_MIN
                               */
                               public void setC_MIN(Quantum183 param){
                            
                                            this.localC_MIN=param;
                                    

                               }
                            

                        /**
                        * field for C_MAX
                        */

                        
                                    protected Quantum183 localC_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getC_MAX(){
                               return localC_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param C_MAX
                               */
                               public void setC_MAX(Quantum183 param){
                            
                                            this.localC_MAX=param;
                                    

                               }
                            

                        /**
                        * field for SI_MIN
                        */

                        
                                    protected Quantum183 localSI_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getSI_MIN(){
                               return localSI_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SI_MIN
                               */
                               public void setSI_MIN(Quantum183 param){
                            
                                            this.localSI_MIN=param;
                                    

                               }
                            

                        /**
                        * field for SI_MAX
                        */

                        
                                    protected Quantum183 localSI_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getSI_MAX(){
                               return localSI_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SI_MAX
                               */
                               public void setSI_MAX(Quantum183 param){
                            
                                            this.localSI_MAX=param;
                                    

                               }
                            

                        /**
                        * field for MN_MIN
                        */

                        
                                    protected Quantum183 localMN_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getMN_MIN(){
                               return localMN_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MN_MIN
                               */
                               public void setMN_MIN(Quantum183 param){
                            
                                            this.localMN_MIN=param;
                                    

                               }
                            

                        /**
                        * field for MN_MAX
                        */

                        
                                    protected Quantum183 localMN_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getMN_MAX(){
                               return localMN_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MN_MAX
                               */
                               public void setMN_MAX(Quantum183 param){
                            
                                            this.localMN_MAX=param;
                                    

                               }
                            

                        /**
                        * field for P_MIN
                        */

                        
                                    protected Quantum183 localP_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getP_MIN(){
                               return localP_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param P_MIN
                               */
                               public void setP_MIN(Quantum183 param){
                            
                                            this.localP_MIN=param;
                                    

                               }
                            

                        /**
                        * field for P_MAX
                        */

                        
                                    protected Quantum183 localP_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getP_MAX(){
                               return localP_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param P_MAX
                               */
                               public void setP_MAX(Quantum183 param){
                            
                                            this.localP_MAX=param;
                                    

                               }
                            

                        /**
                        * field for S_MIN
                        */

                        
                                    protected Quantum183 localS_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getS_MIN(){
                               return localS_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param S_MIN
                               */
                               public void setS_MIN(Quantum183 param){
                            
                                            this.localS_MIN=param;
                                    

                               }
                            

                        /**
                        * field for S_MAX
                        */

                        
                                    protected Quantum183 localS_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getS_MAX(){
                               return localS_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param S_MAX
                               */
                               public void setS_MAX(Quantum183 param){
                            
                                            this.localS_MAX=param;
                                    

                               }
                            

                        /**
                        * field for CR_MIN
                        */

                        
                                    protected Quantum183 localCR_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getCR_MIN(){
                               return localCR_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CR_MIN
                               */
                               public void setCR_MIN(Quantum183 param){
                            
                                            this.localCR_MIN=param;
                                    

                               }
                            

                        /**
                        * field for CR_MAX
                        */

                        
                                    protected Quantum183 localCR_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getCR_MAX(){
                               return localCR_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CR_MAX
                               */
                               public void setCR_MAX(Quantum183 param){
                            
                                            this.localCR_MAX=param;
                                    

                               }
                            

                        /**
                        * field for NI_MIN
                        */

                        
                                    protected Quantum183 localNI_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getNI_MIN(){
                               return localNI_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NI_MIN
                               */
                               public void setNI_MIN(Quantum183 param){
                            
                                            this.localNI_MIN=param;
                                    

                               }
                            

                        /**
                        * field for NI_MAX
                        */

                        
                                    protected Quantum183 localNI_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getNI_MAX(){
                               return localNI_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NI_MAX
                               */
                               public void setNI_MAX(Quantum183 param){
                            
                                            this.localNI_MAX=param;
                                    

                               }
                            

                        /**
                        * field for CU_MIN
                        */

                        
                                    protected Quantum183 localCU_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getCU_MIN(){
                               return localCU_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CU_MIN
                               */
                               public void setCU_MIN(Quantum183 param){
                            
                                            this.localCU_MIN=param;
                                    

                               }
                            

                        /**
                        * field for CU_MAX
                        */

                        
                                    protected Quantum183 localCU_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getCU_MAX(){
                               return localCU_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CU_MAX
                               */
                               public void setCU_MAX(Quantum183 param){
                            
                                            this.localCU_MAX=param;
                                    

                               }
                            

                        /**
                        * field for ZR_MIN
                        */

                        
                                    protected Quantum183 localZR_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getZR_MIN(){
                               return localZR_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZR_MIN
                               */
                               public void setZR_MIN(Quantum183 param){
                            
                                            this.localZR_MIN=param;
                                    

                               }
                            

                        /**
                        * field for ZR_MAX
                        */

                        
                                    protected Quantum183 localZR_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getZR_MAX(){
                               return localZR_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZR_MAX
                               */
                               public void setZR_MAX(Quantum183 param){
                            
                                            this.localZR_MAX=param;
                                    

                               }
                            

                        /**
                        * field for SN_MIN
                        */

                        
                                    protected Quantum183 localSN_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getSN_MIN(){
                               return localSN_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SN_MIN
                               */
                               public void setSN_MIN(Quantum183 param){
                            
                                            this.localSN_MIN=param;
                                    

                               }
                            

                        /**
                        * field for SN_MAX
                        */

                        
                                    protected Quantum183 localSN_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getSN_MAX(){
                               return localSN_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SN_MAX
                               */
                               public void setSN_MAX(Quantum183 param){
                            
                                            this.localSN_MAX=param;
                                    

                               }
                            

                        /**
                        * field for PB_MIN
                        */

                        
                                    protected Quantum183 localPB_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getPB_MIN(){
                               return localPB_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PB_MIN
                               */
                               public void setPB_MIN(Quantum183 param){
                            
                                            this.localPB_MIN=param;
                                    

                               }
                            

                        /**
                        * field for PB_MAX
                        */

                        
                                    protected Quantum183 localPB_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getPB_MAX(){
                               return localPB_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PB_MAX
                               */
                               public void setPB_MAX(Quantum183 param){
                            
                                            this.localPB_MAX=param;
                                    

                               }
                            

                        /**
                        * field for SB_MIN
                        */

                        
                                    protected Quantum183 localSB_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getSB_MIN(){
                               return localSB_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SB_MIN
                               */
                               public void setSB_MIN(Quantum183 param){
                            
                                            this.localSB_MIN=param;
                                    

                               }
                            

                        /**
                        * field for SB_MAX
                        */

                        
                                    protected Quantum183 localSB_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getSB_MAX(){
                               return localSB_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SB_MAX
                               */
                               public void setSB_MAX(Quantum183 param){
                            
                                            this.localSB_MAX=param;
                                    

                               }
                            

                        /**
                        * field for AS_MIN
                        */

                        
                                    protected Quantum183 localAS_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getAS_MIN(){
                               return localAS_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AS_MIN
                               */
                               public void setAS_MIN(Quantum183 param){
                            
                                            this.localAS_MIN=param;
                                    

                               }
                            

                        /**
                        * field for AS_MAX
                        */

                        
                                    protected Quantum183 localAS_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getAS_MAX(){
                               return localAS_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AS_MAX
                               */
                               public void setAS_MAX(Quantum183 param){
                            
                                            this.localAS_MAX=param;
                                    

                               }
                            

                        /**
                        * field for CO_MIN
                        */

                        
                                    protected Quantum183 localCO_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getCO_MIN(){
                               return localCO_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CO_MIN
                               */
                               public void setCO_MIN(Quantum183 param){
                            
                                            this.localCO_MIN=param;
                                    

                               }
                            

                        /**
                        * field for CO_MAX
                        */

                        
                                    protected Quantum183 localCO_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getCO_MAX(){
                               return localCO_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CO_MAX
                               */
                               public void setCO_MAX(Quantum183 param){
                            
                                            this.localCO_MAX=param;
                                    

                               }
                            

                        /**
                        * field for TA_MIN
                        */

                        
                                    protected Quantum183 localTA_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getTA_MIN(){
                               return localTA_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TA_MIN
                               */
                               public void setTA_MIN(Quantum183 param){
                            
                                            this.localTA_MIN=param;
                                    

                               }
                            

                        /**
                        * field for TA_MAX
                        */

                        
                                    protected Quantum183 localTA_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getTA_MAX(){
                               return localTA_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TA_MAX
                               */
                               public void setTA_MAX(Quantum183 param){
                            
                                            this.localTA_MAX=param;
                                    

                               }
                            

                        /**
                        * field for TA1_MIN
                        */

                        
                                    protected Quantum183 localTA1_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getTA1_MIN(){
                               return localTA1_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TA1_MIN
                               */
                               public void setTA1_MIN(Quantum183 param){
                            
                                            this.localTA1_MIN=param;
                                    

                               }
                            

                        /**
                        * field for TA1_MAX
                        */

                        
                                    protected Quantum183 localTA1_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getTA1_MAX(){
                               return localTA1_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TA1_MAX
                               */
                               public void setTA1_MAX(Quantum183 param){
                            
                                            this.localTA1_MAX=param;
                                    

                               }
                            

                        /**
                        * field for USER1_MIN
                        */

                        
                                    protected Quantum183 localUSER1_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getUSER1_MIN(){
                               return localUSER1_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param USER1_MIN
                               */
                               public void setUSER1_MIN(Quantum183 param){
                            
                                            this.localUSER1_MIN=param;
                                    

                               }
                            

                        /**
                        * field for USER1_MAX
                        */

                        
                                    protected Quantum183 localUSER1_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getUSER1_MAX(){
                               return localUSER1_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param USER1_MAX
                               */
                               public void setUSER1_MAX(Quantum183 param){
                            
                                            this.localUSER1_MAX=param;
                                    

                               }
                            

                        /**
                        * field for USER2_MIN
                        */

                        
                                    protected Quantum183 localUSER2_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getUSER2_MIN(){
                               return localUSER2_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param USER2_MIN
                               */
                               public void setUSER2_MIN(Quantum183 param){
                            
                                            this.localUSER2_MIN=param;
                                    

                               }
                            

                        /**
                        * field for USER2_MAX
                        */

                        
                                    protected Quantum183 localUSER2_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getUSER2_MAX(){
                               return localUSER2_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param USER2_MAX
                               */
                               public void setUSER2_MAX(Quantum183 param){
                            
                                            this.localUSER2_MAX=param;
                                    

                               }
                            

                        /**
                        * field for USER3_MIN
                        */

                        
                                    protected Quantum183 localUSER3_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getUSER3_MIN(){
                               return localUSER3_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param USER3_MIN
                               */
                               public void setUSER3_MIN(Quantum183 param){
                            
                                            this.localUSER3_MIN=param;
                                    

                               }
                            

                        /**
                        * field for USER3_MAX
                        */

                        
                                    protected Quantum183 localUSER3_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getUSER3_MAX(){
                               return localUSER3_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param USER3_MAX
                               */
                               public void setUSER3_MAX(Quantum183 param){
                            
                                            this.localUSER3_MAX=param;
                                    

                               }
                            

                        /**
                        * field for TS_MIN
                        */

                        
                                    protected Quantum183 localTS_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getTS_MIN(){
                               return localTS_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TS_MIN
                               */
                               public void setTS_MIN(Quantum183 param){
                            
                                            this.localTS_MIN=param;
                                    

                               }
                            

                        /**
                        * field for TS_MAX
                        */

                        
                                    protected Quantum183 localTS_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getTS_MAX(){
                               return localTS_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TS_MAX
                               */
                               public void setTS_MAX(Quantum183 param){
                            
                                            this.localTS_MAX=param;
                                    

                               }
                            

                        /**
                        * field for YS_MIN
                        */

                        
                                    protected Quantum183 localYS_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getYS_MIN(){
                               return localYS_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param YS_MIN
                               */
                               public void setYS_MIN(Quantum183 param){
                            
                                            this.localYS_MIN=param;
                                    

                               }
                            

                        /**
                        * field for YS_MAX
                        */

                        
                                    protected Quantum183 localYS_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getYS_MAX(){
                               return localYS_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param YS_MAX
                               */
                               public void setYS_MAX(Quantum183 param){
                            
                                            this.localYS_MAX=param;
                                    

                               }
                            

                        /**
                        * field for E_MIN
                        */

                        
                                    protected Quantum183 localE_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getE_MIN(){
                               return localE_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param E_MIN
                               */
                               public void setE_MIN(Quantum183 param){
                            
                                            this.localE_MIN=param;
                                    

                               }
                            

                        /**
                        * field for E_MAX
                        */

                        
                                    protected Quantum183 localE_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getE_MAX(){
                               return localE_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param E_MAX
                               */
                               public void setE_MAX(Quantum183 param){
                            
                                            this.localE_MAX=param;
                                    

                               }
                            

                        /**
                        * field for R_MIN
                        */

                        
                                    protected Quantum183 localR_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getR_MIN(){
                               return localR_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param R_MIN
                               */
                               public void setR_MIN(Quantum183 param){
                            
                                            this.localR_MIN=param;
                                    

                               }
                            

                        /**
                        * field for R_MAX
                        */

                        
                                    protected Quantum183 localR_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getR_MAX(){
                               return localR_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param R_MAX
                               */
                               public void setR_MAX(Quantum183 param){
                            
                                            this.localR_MAX=param;
                                    

                               }
                            

                        /**
                        * field for HB_MIN
                        */

                        
                                    protected Quantum183 localHB_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getHB_MIN(){
                               return localHB_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HB_MIN
                               */
                               public void setHB_MIN(Quantum183 param){
                            
                                            this.localHB_MIN=param;
                                    

                               }
                            

                        /**
                        * field for HB_MAX
                        */

                        
                                    protected Quantum183 localHB_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getHB_MAX(){
                               return localHB_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HB_MAX
                               */
                               public void setHB_MAX(Quantum183 param){
                            
                                            this.localHB_MAX=param;
                                    

                               }
                            

                        /**
                        * field for B_MAX
                        */

                        
                                    protected Quantum184 localB_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum184
                           */
                           public  Quantum184 getB_MAX(){
                               return localB_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param B_MAX
                               */
                               public void setB_MAX(Quantum184 param){
                            
                                            this.localB_MAX=param;
                                    

                               }
                            

                        /**
                        * field for B_MIN
                        */

                        
                                    protected Quantum184 localB_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum184
                           */
                           public  Quantum184 getB_MIN(){
                               return localB_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param B_MIN
                               */
                               public void setB_MIN(Quantum184 param){
                            
                                            this.localB_MIN=param;
                                    

                               }
                            

                        /**
                        * field for HEAT1
                        */

                        
                                    protected Char40 localHEAT1 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char40
                           */
                           public  Char40 getHEAT1(){
                               return localHEAT1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HEAT1
                               */
                               public void setHEAT1(Char40 param){
                            
                                            this.localHEAT1=param;
                                    

                               }
                            

                        /**
                        * field for HDSC1
                        */

                        
                                    protected Char20 localHDSC1 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getHDSC1(){
                               return localHDSC1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HDSC1
                               */
                               public void setHDSC1(Char20 param){
                            
                                            this.localHDSC1=param;
                                    

                               }
                            

                        /**
                        * field for TEMP1
                        */

                        
                                    protected Char15 localTEMP1 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char15
                           */
                           public  Char15 getTEMP1(){
                               return localTEMP1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TEMP1
                               */
                               public void setTEMP1(Char15 param){
                            
                                            this.localTEMP1=param;
                                    

                               }
                            

                        /**
                        * field for TDSC1
                        */

                        
                                    protected Char20 localTDSC1 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getTDSC1(){
                               return localTDSC1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TDSC1
                               */
                               public void setTDSC1(Char20 param){
                            
                                            this.localTDSC1=param;
                                    

                               }
                            

                        /**
                        * field for HOLD1
                        */

                        
                                    protected Char20 localHOLD1 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getHOLD1(){
                               return localHOLD1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HOLD1
                               */
                               public void setHOLD1(Char20 param){
                            
                                            this.localHOLD1=param;
                                    

                               }
                            

                        /**
                        * field for HODSC1
                        */

                        
                                    protected Char20 localHODSC1 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getHODSC1(){
                               return localHODSC1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HODSC1
                               */
                               public void setHODSC1(Char20 param){
                            
                                            this.localHODSC1=param;
                                    

                               }
                            

                        /**
                        * field for COOL1
                        */

                        
                                    protected Char21 localCOOL1 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char21
                           */
                           public  Char21 getCOOL1(){
                               return localCOOL1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param COOL1
                               */
                               public void setCOOL1(Char21 param){
                            
                                            this.localCOOL1=param;
                                    

                               }
                            

                        /**
                        * field for CDSC1
                        */

                        
                                    protected Char20 localCDSC1 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getCDSC1(){
                               return localCDSC1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CDSC1
                               */
                               public void setCDSC1(Char20 param){
                            
                                            this.localCDSC1=param;
                                    

                               }
                            

                        /**
                        * field for FURN1
                        */

                        
                                    protected Char20 localFURN1 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getFURN1(){
                               return localFURN1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FURN1
                               */
                               public void setFURN1(Char20 param){
                            
                                            this.localFURN1=param;
                                    

                               }
                            

                        /**
                        * field for FDSC1
                        */

                        
                                    protected Char20 localFDSC1 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getFDSC1(){
                               return localFDSC1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FDSC1
                               */
                               public void setFDSC1(Char20 param){
                            
                                            this.localFDSC1=param;
                                    

                               }
                            

                        /**
                        * field for HEAT2
                        */

                        
                                    protected Char40 localHEAT2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char40
                           */
                           public  Char40 getHEAT2(){
                               return localHEAT2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HEAT2
                               */
                               public void setHEAT2(Char40 param){
                            
                                            this.localHEAT2=param;
                                    

                               }
                            

                        /**
                        * field for HDSC2
                        */

                        
                                    protected Char20 localHDSC2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getHDSC2(){
                               return localHDSC2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HDSC2
                               */
                               public void setHDSC2(Char20 param){
                            
                                            this.localHDSC2=param;
                                    

                               }
                            

                        /**
                        * field for TEMP2
                        */

                        
                                    protected Char15 localTEMP2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char15
                           */
                           public  Char15 getTEMP2(){
                               return localTEMP2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TEMP2
                               */
                               public void setTEMP2(Char15 param){
                            
                                            this.localTEMP2=param;
                                    

                               }
                            

                        /**
                        * field for TDSC2
                        */

                        
                                    protected Char20 localTDSC2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getTDSC2(){
                               return localTDSC2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TDSC2
                               */
                               public void setTDSC2(Char20 param){
                            
                                            this.localTDSC2=param;
                                    

                               }
                            

                        /**
                        * field for HOLD2
                        */

                        
                                    protected Char20 localHOLD2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getHOLD2(){
                               return localHOLD2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HOLD2
                               */
                               public void setHOLD2(Char20 param){
                            
                                            this.localHOLD2=param;
                                    

                               }
                            

                        /**
                        * field for HODSC2
                        */

                        
                                    protected Char20 localHODSC2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getHODSC2(){
                               return localHODSC2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HODSC2
                               */
                               public void setHODSC2(Char20 param){
                            
                                            this.localHODSC2=param;
                                    

                               }
                            

                        /**
                        * field for COOL2
                        */

                        
                                    protected Char21 localCOOL2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char21
                           */
                           public  Char21 getCOOL2(){
                               return localCOOL2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param COOL2
                               */
                               public void setCOOL2(Char21 param){
                            
                                            this.localCOOL2=param;
                                    

                               }
                            

                        /**
                        * field for CDSC2
                        */

                        
                                    protected Char20 localCDSC2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getCDSC2(){
                               return localCDSC2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CDSC2
                               */
                               public void setCDSC2(Char20 param){
                            
                                            this.localCDSC2=param;
                                    

                               }
                            

                        /**
                        * field for FURN2
                        */

                        
                                    protected Char20 localFURN2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getFURN2(){
                               return localFURN2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FURN2
                               */
                               public void setFURN2(Char20 param){
                            
                                            this.localFURN2=param;
                                    

                               }
                            

                        /**
                        * field for FDSC2
                        */

                        
                                    protected Char20 localFDSC2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getFDSC2(){
                               return localFDSC2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FDSC2
                               */
                               public void setFDSC2(Char20 param){
                            
                                            this.localFDSC2=param;
                                    

                               }
                            

                        /**
                        * field for HEAT3
                        */

                        
                                    protected Char40 localHEAT3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char40
                           */
                           public  Char40 getHEAT3(){
                               return localHEAT3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HEAT3
                               */
                               public void setHEAT3(Char40 param){
                            
                                            this.localHEAT3=param;
                                    

                               }
                            

                        /**
                        * field for HDSC3
                        */

                        
                                    protected Char20 localHDSC3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getHDSC3(){
                               return localHDSC3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HDSC3
                               */
                               public void setHDSC3(Char20 param){
                            
                                            this.localHDSC3=param;
                                    

                               }
                            

                        /**
                        * field for TEMP3
                        */

                        
                                    protected Char15 localTEMP3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char15
                           */
                           public  Char15 getTEMP3(){
                               return localTEMP3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TEMP3
                               */
                               public void setTEMP3(Char15 param){
                            
                                            this.localTEMP3=param;
                                    

                               }
                            

                        /**
                        * field for TDSC3
                        */

                        
                                    protected Char20 localTDSC3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getTDSC3(){
                               return localTDSC3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TDSC3
                               */
                               public void setTDSC3(Char20 param){
                            
                                            this.localTDSC3=param;
                                    

                               }
                            

                        /**
                        * field for HOLD3
                        */

                        
                                    protected Char20 localHOLD3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getHOLD3(){
                               return localHOLD3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HOLD3
                               */
                               public void setHOLD3(Char20 param){
                            
                                            this.localHOLD3=param;
                                    

                               }
                            

                        /**
                        * field for HODSC3
                        */

                        
                                    protected Char20 localHODSC3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getHODSC3(){
                               return localHODSC3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HODSC3
                               */
                               public void setHODSC3(Char20 param){
                            
                                            this.localHODSC3=param;
                                    

                               }
                            

                        /**
                        * field for COOL3
                        */

                        
                                    protected Char21 localCOOL3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char21
                           */
                           public  Char21 getCOOL3(){
                               return localCOOL3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param COOL3
                               */
                               public void setCOOL3(Char21 param){
                            
                                            this.localCOOL3=param;
                                    

                               }
                            

                        /**
                        * field for CDSC3
                        */

                        
                                    protected Char20 localCDSC3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getCDSC3(){
                               return localCDSC3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CDSC3
                               */
                               public void setCDSC3(Char20 param){
                            
                                            this.localCDSC3=param;
                                    

                               }
                            

                        /**
                        * field for FURN3
                        */

                        
                                    protected Char20 localFURN3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getFURN3(){
                               return localFURN3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FURN3
                               */
                               public void setFURN3(Char20 param){
                            
                                            this.localFURN3=param;
                                    

                               }
                            

                        /**
                        * field for FDSC3
                        */

                        
                                    protected Char20 localFDSC3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getFDSC3(){
                               return localFDSC3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FDSC3
                               */
                               public void setFDSC3(Char20 param){
                            
                                            this.localFDSC3=param;
                                    

                               }
                            

                        /**
                        * field for HEAT4
                        */

                        
                                    protected Char40 localHEAT4 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char40
                           */
                           public  Char40 getHEAT4(){
                               return localHEAT4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HEAT4
                               */
                               public void setHEAT4(Char40 param){
                            
                                            this.localHEAT4=param;
                                    

                               }
                            

                        /**
                        * field for HDSC4
                        */

                        
                                    protected Char20 localHDSC4 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getHDSC4(){
                               return localHDSC4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HDSC4
                               */
                               public void setHDSC4(Char20 param){
                            
                                            this.localHDSC4=param;
                                    

                               }
                            

                        /**
                        * field for TEMP4
                        */

                        
                                    protected Char15 localTEMP4 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char15
                           */
                           public  Char15 getTEMP4(){
                               return localTEMP4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TEMP4
                               */
                               public void setTEMP4(Char15 param){
                            
                                            this.localTEMP4=param;
                                    

                               }
                            

                        /**
                        * field for HOLD4
                        */

                        
                                    protected Char20 localHOLD4 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getHOLD4(){
                               return localHOLD4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HOLD4
                               */
                               public void setHOLD4(Char20 param){
                            
                                            this.localHOLD4=param;
                                    

                               }
                            

                        /**
                        * field for HODSC4
                        */

                        
                                    protected Char20 localHODSC4 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getHODSC4(){
                               return localHODSC4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HODSC4
                               */
                               public void setHODSC4(Char20 param){
                            
                                            this.localHODSC4=param;
                                    

                               }
                            

                        /**
                        * field for COOL4
                        */

                        
                                    protected Char21 localCOOL4 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char21
                           */
                           public  Char21 getCOOL4(){
                               return localCOOL4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param COOL4
                               */
                               public void setCOOL4(Char21 param){
                            
                                            this.localCOOL4=param;
                                    

                               }
                            

                        /**
                        * field for CDSC4
                        */

                        
                                    protected Char20 localCDSC4 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getCDSC4(){
                               return localCDSC4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CDSC4
                               */
                               public void setCDSC4(Char20 param){
                            
                                            this.localCDSC4=param;
                                    

                               }
                            

                        /**
                        * field for FE_MAX
                        */

                        
                                    protected Quantum183 localFE_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getFE_MAX(){
                               return localFE_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FE_MAX
                               */
                               public void setFE_MAX(Quantum183 param){
                            
                                            this.localFE_MAX=param;
                                    

                               }
                            

                        /**
                        * field for FE_MIN
                        */

                        
                                    protected Quantum183 localFE_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getFE_MIN(){
                               return localFE_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FE_MIN
                               */
                               public void setFE_MIN(Quantum183 param){
                            
                                            this.localFE_MIN=param;
                                    

                               }
                            

                        /**
                        * field for MO_MIN
                        */

                        
                                    protected Quantum183 localMO_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getMO_MIN(){
                               return localMO_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MO_MIN
                               */
                               public void setMO_MIN(Quantum183 param){
                            
                                            this.localMO_MIN=param;
                                    

                               }
                            

                        /**
                        * field for MO_MAX
                        */

                        
                                    protected Quantum183 localMO_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getMO_MAX(){
                               return localMO_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MO_MAX
                               */
                               public void setMO_MAX(Quantum183 param){
                            
                                            this.localMO_MAX=param;
                                    

                               }
                            

                        /**
                        * field for V_MIN
                        */

                        
                                    protected Quantum183 localV_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getV_MIN(){
                               return localV_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param V_MIN
                               */
                               public void setV_MIN(Quantum183 param){
                            
                                            this.localV_MIN=param;
                                    

                               }
                            

                        /**
                        * field for V_MAX
                        */

                        
                                    protected Quantum183 localV_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getV_MAX(){
                               return localV_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param V_MAX
                               */
                               public void setV_MAX(Quantum183 param){
                            
                                            this.localV_MAX=param;
                                    

                               }
                            

                        /**
                        * field for AL_MIN
                        */

                        
                                    protected Quantum183 localAL_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getAL_MIN(){
                               return localAL_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AL_MIN
                               */
                               public void setAL_MIN(Quantum183 param){
                            
                                            this.localAL_MIN=param;
                                    

                               }
                            

                        /**
                        * field for AL_MAX
                        */

                        
                                    protected Quantum183 localAL_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getAL_MAX(){
                               return localAL_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AL_MAX
                               */
                               public void setAL_MAX(Quantum183 param){
                            
                                            this.localAL_MAX=param;
                                    

                               }
                            

                        /**
                        * field for NB_MIN
                        */

                        
                                    protected Quantum183 localNB_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getNB_MIN(){
                               return localNB_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NB_MIN
                               */
                               public void setNB_MIN(Quantum183 param){
                            
                                            this.localNB_MIN=param;
                                    

                               }
                            

                        /**
                        * field for NB_MAX
                        */

                        
                                    protected Quantum183 localNB_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getNB_MAX(){
                               return localNB_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NB_MAX
                               */
                               public void setNB_MAX(Quantum183 param){
                            
                                            this.localNB_MAX=param;
                                    

                               }
                            

                        /**
                        * field for W_MIN
                        */

                        
                                    protected Quantum183 localW_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getW_MIN(){
                               return localW_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param W_MIN
                               */
                               public void setW_MIN(Quantum183 param){
                            
                                            this.localW_MIN=param;
                                    

                               }
                            

                        /**
                        * field for W_MAX
                        */

                        
                                    protected Quantum183 localW_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getW_MAX(){
                               return localW_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param W_MAX
                               */
                               public void setW_MAX(Quantum183 param){
                            
                                            this.localW_MAX=param;
                                    

                               }
                            

                        /**
                        * field for ZN_MIN
                        */

                        
                                    protected Quantum183 localZN_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getZN_MIN(){
                               return localZN_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZN_MIN
                               */
                               public void setZN_MIN(Quantum183 param){
                            
                                            this.localZN_MIN=param;
                                    

                               }
                            

                        /**
                        * field for ZN_MAX
                        */

                        
                                    protected Quantum183 localZN_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getZN_MAX(){
                               return localZN_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZN_MAX
                               */
                               public void setZN_MAX(Quantum183 param){
                            
                                            this.localZN_MAX=param;
                                    

                               }
                            

                        /**
                        * field for TI_MIN
                        */

                        
                                    protected Quantum183 localTI_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getTI_MIN(){
                               return localTI_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TI_MIN
                               */
                               public void setTI_MIN(Quantum183 param){
                            
                                            this.localTI_MIN=param;
                                    

                               }
                            

                        /**
                        * field for TI_MAX
                        */

                        
                                    protected Quantum183 localTI_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getTI_MAX(){
                               return localTI_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TI_MAX
                               */
                               public void setTI_MAX(Quantum183 param){
                            
                                            this.localTI_MAX=param;
                                    

                               }
                            

                        /**
                        * field for N_MIN
                        */

                        
                                    protected Quantum184 localN_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum184
                           */
                           public  Quantum184 getN_MIN(){
                               return localN_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param N_MIN
                               */
                               public void setN_MIN(Quantum184 param){
                            
                                            this.localN_MIN=param;
                                    

                               }
                            

                        /**
                        * field for N_MAX
                        */

                        
                                    protected Quantum184 localN_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum184
                           */
                           public  Quantum184 getN_MAX(){
                               return localN_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param N_MAX
                               */
                               public void setN_MAX(Quantum184 param){
                            
                                            this.localN_MAX=param;
                                    

                               }
                            

                        /**
                        * field for FREE1_MIN
                        */

                        
                                    protected Quantum183 localFREE1_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getFREE1_MIN(){
                               return localFREE1_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FREE1_MIN
                               */
                               public void setFREE1_MIN(Quantum183 param){
                            
                                            this.localFREE1_MIN=param;
                                    

                               }
                            

                        /**
                        * field for FREE1_MAX
                        */

                        
                                    protected Quantum183 localFREE1_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getFREE1_MAX(){
                               return localFREE1_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FREE1_MAX
                               */
                               public void setFREE1_MAX(Quantum183 param){
                            
                                            this.localFREE1_MAX=param;
                                    

                               }
                            

                        /**
                        * field for FREE2_MIN
                        */

                        
                                    protected Quantum183 localFREE2_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getFREE2_MIN(){
                               return localFREE2_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FREE2_MIN
                               */
                               public void setFREE2_MIN(Quantum183 param){
                            
                                            this.localFREE2_MIN=param;
                                    

                               }
                            

                        /**
                        * field for FREE2_MAX
                        */

                        
                                    protected Quantum183 localFREE2_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getFREE2_MAX(){
                               return localFREE2_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FREE2_MAX
                               */
                               public void setFREE2_MAX(Quantum183 param){
                            
                                            this.localFREE2_MAX=param;
                                    

                               }
                            

                        /**
                        * field for FREE3_MIN
                        */

                        
                                    protected Quantum183 localFREE3_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getFREE3_MIN(){
                               return localFREE3_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FREE3_MIN
                               */
                               public void setFREE3_MIN(Quantum183 param){
                            
                                            this.localFREE3_MIN=param;
                                    

                               }
                            

                        /**
                        * field for FREE3_MAX
                        */

                        
                                    protected Quantum183 localFREE3_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getFREE3_MAX(){
                               return localFREE3_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FREE3_MAX
                               */
                               public void setFREE3_MAX(Quantum183 param){
                            
                                            this.localFREE3_MAX=param;
                                    

                               }
                            

                        /**
                        * field for FREE1_MIN_DES
                        */

                        
                                    protected Char25 localFREE1_MIN_DES ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char25
                           */
                           public  Char25 getFREE1_MIN_DES(){
                               return localFREE1_MIN_DES;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FREE1_MIN_DES
                               */
                               public void setFREE1_MIN_DES(Char25 param){
                            
                                            this.localFREE1_MIN_DES=param;
                                    

                               }
                            

                        /**
                        * field for FREE1_MAX_DES
                        */

                        
                                    protected Char25 localFREE1_MAX_DES ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char25
                           */
                           public  Char25 getFREE1_MAX_DES(){
                               return localFREE1_MAX_DES;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FREE1_MAX_DES
                               */
                               public void setFREE1_MAX_DES(Char25 param){
                            
                                            this.localFREE1_MAX_DES=param;
                                    

                               }
                            

                        /**
                        * field for FREE2_MIN_DES
                        */

                        
                                    protected Char25 localFREE2_MIN_DES ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char25
                           */
                           public  Char25 getFREE2_MIN_DES(){
                               return localFREE2_MIN_DES;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FREE2_MIN_DES
                               */
                               public void setFREE2_MIN_DES(Char25 param){
                            
                                            this.localFREE2_MIN_DES=param;
                                    

                               }
                            

                        /**
                        * field for FREE2_MAX_DES
                        */

                        
                                    protected Char25 localFREE2_MAX_DES ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char25
                           */
                           public  Char25 getFREE2_MAX_DES(){
                               return localFREE2_MAX_DES;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FREE2_MAX_DES
                               */
                               public void setFREE2_MAX_DES(Char25 param){
                            
                                            this.localFREE2_MAX_DES=param;
                                    

                               }
                            

                        /**
                        * field for FREE3_MIN_DES
                        */

                        
                                    protected Char25 localFREE3_MIN_DES ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char25
                           */
                           public  Char25 getFREE3_MIN_DES(){
                               return localFREE3_MIN_DES;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FREE3_MIN_DES
                               */
                               public void setFREE3_MIN_DES(Char25 param){
                            
                                            this.localFREE3_MIN_DES=param;
                                    

                               }
                            

                        /**
                        * field for FREE3_MAX_DES
                        */

                        
                                    protected Char25 localFREE3_MAX_DES ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char25
                           */
                           public  Char25 getFREE3_MAX_DES(){
                               return localFREE3_MAX_DES;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FREE3_MAX_DES
                               */
                               public void setFREE3_MAX_DES(Char25 param){
                            
                                            this.localFREE3_MAX_DES=param;
                                    

                               }
                            

                        /**
                        * field for J_TEMP
                        */

                        
                                    protected Char8 localJ_TEMP ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_TEMP(){
                               return localJ_TEMP;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_TEMP
                               */
                               public void setJ_TEMP(Char8 param){
                            
                                            this.localJ_TEMP=param;
                                    

                               }
                            

                        /**
                        * field for J_AVG
                        */

                        
                                    protected Char8 localJ_AVG ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_AVG(){
                               return localJ_AVG;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_AVG
                               */
                               public void setJ_AVG(Char8 param){
                            
                                            this.localJ_AVG=param;
                                    

                               }
                            

                        /**
                        * field for J_MIN
                        */

                        
                                    protected Char8 localJ_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_MIN(){
                               return localJ_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_MIN
                               */
                               public void setJ_MIN(Char8 param){
                            
                                            this.localJ_MIN=param;
                                    

                               }
                            

                        /**
                        * field for J_TEMP2
                        */

                        
                                    protected Char8 localJ_TEMP2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_TEMP2(){
                               return localJ_TEMP2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_TEMP2
                               */
                               public void setJ_TEMP2(Char8 param){
                            
                                            this.localJ_TEMP2=param;
                                    

                               }
                            

                        /**
                        * field for J_AVG2
                        */

                        
                                    protected Char8 localJ_AVG2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_AVG2(){
                               return localJ_AVG2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_AVG2
                               */
                               public void setJ_AVG2(Char8 param){
                            
                                            this.localJ_AVG2=param;
                                    

                               }
                            

                        /**
                        * field for J_MIN2
                        */

                        
                                    protected Char8 localJ_MIN2 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_MIN2(){
                               return localJ_MIN2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_MIN2
                               */
                               public void setJ_MIN2(Char8 param){
                            
                                            this.localJ_MIN2=param;
                                    

                               }
                            

                        /**
                        * field for J_TEMP3
                        */

                        
                                    protected Char8 localJ_TEMP3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_TEMP3(){
                               return localJ_TEMP3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_TEMP3
                               */
                               public void setJ_TEMP3(Char8 param){
                            
                                            this.localJ_TEMP3=param;
                                    

                               }
                            

                        /**
                        * field for J_AVG3
                        */

                        
                                    protected Char8 localJ_AVG3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_AVG3(){
                               return localJ_AVG3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_AVG3
                               */
                               public void setJ_AVG3(Char8 param){
                            
                                            this.localJ_AVG3=param;
                                    

                               }
                            

                        /**
                        * field for J_MIN3
                        */

                        
                                    protected Char8 localJ_MIN3 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_MIN3(){
                               return localJ_MIN3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_MIN3
                               */
                               public void setJ_MIN3(Char8 param){
                            
                                            this.localJ_MIN3=param;
                                    

                               }
                            

                        /**
                        * field for J_TEMP4
                        */

                        
                                    protected Char8 localJ_TEMP4 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_TEMP4(){
                               return localJ_TEMP4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_TEMP4
                               */
                               public void setJ_TEMP4(Char8 param){
                            
                                            this.localJ_TEMP4=param;
                                    

                               }
                            

                        /**
                        * field for J_AVG4
                        */

                        
                                    protected Char8 localJ_AVG4 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_AVG4(){
                               return localJ_AVG4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_AVG4
                               */
                               public void setJ_AVG4(Char8 param){
                            
                                            this.localJ_AVG4=param;
                                    

                               }
                            

                        /**
                        * field for J_MIN4
                        */

                        
                                    protected Char8 localJ_MIN4 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_MIN4(){
                               return localJ_MIN4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_MIN4
                               */
                               public void setJ_MIN4(Char8 param){
                            
                                            this.localJ_MIN4=param;
                                    

                               }
                            

                        /**
                        * field for J_TEMP5
                        */

                        
                                    protected Char8 localJ_TEMP5 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_TEMP5(){
                               return localJ_TEMP5;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_TEMP5
                               */
                               public void setJ_TEMP5(Char8 param){
                            
                                            this.localJ_TEMP5=param;
                                    

                               }
                            

                        /**
                        * field for J_AVG5
                        */

                        
                                    protected Char8 localJ_AVG5 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_AVG5(){
                               return localJ_AVG5;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_AVG5
                               */
                               public void setJ_AVG5(Char8 param){
                            
                                            this.localJ_AVG5=param;
                                    

                               }
                            

                        /**
                        * field for J_MIN5
                        */

                        
                                    protected Char8 localJ_MIN5 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_MIN5(){
                               return localJ_MIN5;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_MIN5
                               */
                               public void setJ_MIN5(Char8 param){
                            
                                            this.localJ_MIN5=param;
                                    

                               }
                            

                        /**
                        * field for J_TEMP6
                        */

                        
                                    protected Char8 localJ_TEMP6 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_TEMP6(){
                               return localJ_TEMP6;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_TEMP6
                               */
                               public void setJ_TEMP6(Char8 param){
                            
                                            this.localJ_TEMP6=param;
                                    

                               }
                            

                        /**
                        * field for J_AVG6
                        */

                        
                                    protected Char8 localJ_AVG6 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_AVG6(){
                               return localJ_AVG6;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_AVG6
                               */
                               public void setJ_AVG6(Char8 param){
                            
                                            this.localJ_AVG6=param;
                                    

                               }
                            

                        /**
                        * field for J_MIN6
                        */

                        
                                    protected Char8 localJ_MIN6 ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char8
                           */
                           public  Char8 getJ_MIN6(){
                               return localJ_MIN6;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param J_MIN6
                               */
                               public void setJ_MIN6(Char8 param){
                            
                                            this.localJ_MIN6=param;
                                    

                               }
                            

                        /**
                        * field for ZIDUAN_STR
                        */

                        
                                    protected Char20 localZIDUAN_STR ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char20
                           */
                           public  Char20 getZIDUAN_STR(){
                               return localZIDUAN_STR;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZIDUAN_STR
                               */
                               public void setZIDUAN_STR(Char20 param){
                            
                                            this.localZIDUAN_STR=param;
                                    

                               }
                            

                        /**
                        * field for YS2_MIN
                        */

                        
                                    protected Quantum183 localYS2_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getYS2_MIN(){
                               return localYS2_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param YS2_MIN
                               */
                               public void setYS2_MIN(Quantum183 param){
                            
                                            this.localYS2_MIN=param;
                                    

                               }
                            

                        /**
                        * field for YS2_MAX
                        */

                        
                                    protected Quantum183 localYS2_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getYS2_MAX(){
                               return localYS2_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param YS2_MAX
                               */
                               public void setYS2_MAX(Quantum183 param){
                            
                                            this.localYS2_MAX=param;
                                    

                               }
                            

                        /**
                        * field for PT
                        */

                        
                                    protected Char2 localPT ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char2
                           */
                           public  Char2 getPT(){
                               return localPT;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PT
                               */
                               public void setPT(Char2 param){
                            
                                            this.localPT=param;
                                    

                               }
                            

                        /**
                        * field for CE_MAX
                        */

                        
                                    protected Quantum183 localCE_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getCE_MAX(){
                               return localCE_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CE_MAX
                               */
                               public void setCE_MAX(Quantum183 param){
                            
                                            this.localCE_MAX=param;
                                    

                               }
                            

                        /**
                        * field for PREN_MIN
                        */

                        
                                    protected Quantum183 localPREN_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getPREN_MIN(){
                               return localPREN_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PREN_MIN
                               */
                               public void setPREN_MIN(Quantum183 param){
                            
                                            this.localPREN_MIN=param;
                                    

                               }
                            

                        /**
                        * field for PREN_B
                        */

                        
                                    protected Char1 localPREN_B ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char1
                           */
                           public  Char1 getPREN_B(){
                               return localPREN_B;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PREN_B
                               */
                               public void setPREN_B(Char1 param){
                            
                                            this.localPREN_B=param;
                                    

                               }
                            

                        /**
                        * field for ZFE_MIN
                        */

                        
                                    protected Quantum183 localZFE_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getZFE_MIN(){
                               return localZFE_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZFE_MIN
                               */
                               public void setZFE_MIN(Quantum183 param){
                            
                                            this.localZFE_MIN=param;
                                    

                               }
                            

                        /**
                        * field for ZFE_MAX
                        */

                        
                                    protected Quantum183 localZFE_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getZFE_MAX(){
                               return localZFE_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZFE_MAX
                               */
                               public void setZFE_MAX(Quantum183 param){
                            
                                            this.localZFE_MAX=param;
                                    

                               }
                            

                        /**
                        * field for ZCA_MIN
                        */

                        
                                    protected Quantum183 localZCA_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getZCA_MIN(){
                               return localZCA_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZCA_MIN
                               */
                               public void setZCA_MIN(Quantum183 param){
                            
                                            this.localZCA_MIN=param;
                                    

                               }
                            

                        /**
                        * field for ZCA_MAX
                        */

                        
                                    protected Quantum183 localZCA_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getZCA_MAX(){
                               return localZCA_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZCA_MAX
                               */
                               public void setZCA_MAX(Quantum183 param){
                            
                                            this.localZCA_MAX=param;
                                    

                               }
                            

                        /**
                        * field for H_MIN
                        */

                        
                                    protected Quantum183 localH_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getH_MIN(){
                               return localH_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param H_MIN
                               */
                               public void setH_MIN(Quantum183 param){
                            
                                            this.localH_MIN=param;
                                    

                               }
                            

                        /**
                        * field for H_MAX
                        */

                        
                                    protected Quantum183 localH_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getH_MAX(){
                               return localH_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param H_MAX
                               */
                               public void setH_MAX(Quantum183 param){
                            
                                            this.localH_MAX=param;
                                    

                               }
                            

                        /**
                        * field for O_MIN
                        */

                        
                                    protected Quantum183 localO_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getO_MIN(){
                               return localO_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param O_MIN
                               */
                               public void setO_MIN(Quantum183 param){
                            
                                            this.localO_MIN=param;
                                    

                               }
                            

                        /**
                        * field for O_MAX
                        */

                        
                                    protected Quantum183 localO_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getO_MAX(){
                               return localO_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param O_MAX
                               */
                               public void setO_MAX(Quantum183 param){
                            
                                            this.localO_MAX=param;
                                    

                               }
                            

                        /**
                        * field for GTS_MIN
                        */

                        
                                    protected Quantum183 localGTS_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getGTS_MIN(){
                               return localGTS_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param GTS_MIN
                               */
                               public void setGTS_MIN(Quantum183 param){
                            
                                            this.localGTS_MIN=param;
                                    

                               }
                            

                        /**
                        * field for GTS_MAX
                        */

                        
                                    protected Quantum183 localGTS_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getGTS_MAX(){
                               return localGTS_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param GTS_MAX
                               */
                               public void setGTS_MAX(Quantum183 param){
                            
                                            this.localGTS_MAX=param;
                                    

                               }
                            

                        /**
                        * field for GYS_MIN
                        */

                        
                                    protected Quantum183 localGYS_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getGYS_MIN(){
                               return localGYS_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param GYS_MIN
                               */
                               public void setGYS_MIN(Quantum183 param){
                            
                                            this.localGYS_MIN=param;
                                    

                               }
                            

                        /**
                        * field for GYS_MAX
                        */

                        
                                    protected Quantum183 localGYS_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getGYS_MAX(){
                               return localGYS_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param GYS_MAX
                               */
                               public void setGYS_MAX(Quantum183 param){
                            
                                            this.localGYS_MAX=param;
                                    

                               }
                            

                        /**
                        * field for GE_MIN
                        */

                        
                                    protected Quantum183 localGE_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getGE_MIN(){
                               return localGE_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param GE_MIN
                               */
                               public void setGE_MIN(Quantum183 param){
                            
                                            this.localGE_MIN=param;
                                    

                               }
                            

                        /**
                        * field for GE_MAX
                        */

                        
                                    protected Quantum183 localGE_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getGE_MAX(){
                               return localGE_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param GE_MAX
                               */
                               public void setGE_MAX(Quantum183 param){
                            
                                            this.localGE_MAX=param;
                                    

                               }
                            

                        /**
                        * field for GR_MIN
                        */

                        
                                    protected Quantum183 localGR_MIN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getGR_MIN(){
                               return localGR_MIN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param GR_MIN
                               */
                               public void setGR_MIN(Quantum183 param){
                            
                                            this.localGR_MIN=param;
                                    

                               }
                            

                        /**
                        * field for GR_MAX
                        */

                        
                                    protected Quantum183 localGR_MAX ;
                                

                           /**
                           * Auto generated getter method
                           * @return Quantum183
                           */
                           public  Quantum183 getGR_MAX(){
                               return localGR_MAX;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param GR_MAX
                               */
                               public void setGR_MAX(Quantum183 param){
                            
                                            this.localGR_MAX=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ZZCAIZHI.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ZZCAIZHI",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ZZCAIZHI",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localMANDT==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MANDT cannot be null!!");
                                            }
                                           localMANDT.serialize(new javax.xml.namespace.QName("","MANDT"),
                                               factory,xmlWriter);
                                        
                                            if (localZCZ==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZCZ cannot be null!!");
                                            }
                                           localZCZ.serialize(new javax.xml.namespace.QName("","ZCZ"),
                                               factory,xmlWriter);
                                        
                                            if (localVBELN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("VBELN cannot be null!!");
                                            }
                                           localVBELN.serialize(new javax.xml.namespace.QName("","VBELN"),
                                               factory,xmlWriter);
                                        
                                            if (localPOSNR==null){
                                                 throw new org.apache.axis2.databinding.ADBException("POSNR cannot be null!!");
                                            }
                                           localPOSNR.serialize(new javax.xml.namespace.QName("","POSNR"),
                                               factory,xmlWriter);
                                        
                                            if (localSTD==null){
                                                 throw new org.apache.axis2.databinding.ADBException("STD cannot be null!!");
                                            }
                                           localSTD.serialize(new javax.xml.namespace.QName("","STD"),
                                               factory,xmlWriter);
                                        
                                            if (localSPECIFICATE==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SPECIFICATE cannot be null!!");
                                            }
                                           localSPECIFICATE.serialize(new javax.xml.namespace.QName("","SPECIFICATE"),
                                               factory,xmlWriter);
                                        
                                            if (localCE==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CE cannot be null!!");
                                            }
                                           localCE.serialize(new javax.xml.namespace.QName("","CE"),
                                               factory,xmlWriter);
                                        
                                            if (localPREN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PREN cannot be null!!");
                                            }
                                           localPREN.serialize(new javax.xml.namespace.QName("","PREN"),
                                               factory,xmlWriter);
                                        
                                            if (localZDEL==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZDEL cannot be null!!");
                                            }
                                           localZDEL.serialize(new javax.xml.namespace.QName("","ZDEL"),
                                               factory,xmlWriter);
                                        
                                            if (localCDATE==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CDATE cannot be null!!");
                                            }
                                           localCDATE.serialize(new javax.xml.namespace.QName("","CDATE"),
                                               factory,xmlWriter);
                                        
                                            if (localMDATE==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MDATE cannot be null!!");
                                            }
                                           localMDATE.serialize(new javax.xml.namespace.QName("","MDATE"),
                                               factory,xmlWriter);
                                        
                                            if (localCUSER==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CUSER cannot be null!!");
                                            }
                                           localCUSER.serialize(new javax.xml.namespace.QName("","CUSER"),
                                               factory,xmlWriter);
                                        
                                            if (localMUSER==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MUSER cannot be null!!");
                                            }
                                           localMUSER.serialize(new javax.xml.namespace.QName("","MUSER"),
                                               factory,xmlWriter);
                                        
                                            if (localC_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("C_MIN cannot be null!!");
                                            }
                                           localC_MIN.serialize(new javax.xml.namespace.QName("","C_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localC_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("C_MAX cannot be null!!");
                                            }
                                           localC_MAX.serialize(new javax.xml.namespace.QName("","C_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localSI_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SI_MIN cannot be null!!");
                                            }
                                           localSI_MIN.serialize(new javax.xml.namespace.QName("","SI_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localSI_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SI_MAX cannot be null!!");
                                            }
                                           localSI_MAX.serialize(new javax.xml.namespace.QName("","SI_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localMN_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MN_MIN cannot be null!!");
                                            }
                                           localMN_MIN.serialize(new javax.xml.namespace.QName("","MN_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localMN_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MN_MAX cannot be null!!");
                                            }
                                           localMN_MAX.serialize(new javax.xml.namespace.QName("","MN_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localP_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("P_MIN cannot be null!!");
                                            }
                                           localP_MIN.serialize(new javax.xml.namespace.QName("","P_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localP_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("P_MAX cannot be null!!");
                                            }
                                           localP_MAX.serialize(new javax.xml.namespace.QName("","P_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localS_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("S_MIN cannot be null!!");
                                            }
                                           localS_MIN.serialize(new javax.xml.namespace.QName("","S_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localS_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("S_MAX cannot be null!!");
                                            }
                                           localS_MAX.serialize(new javax.xml.namespace.QName("","S_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localCR_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CR_MIN cannot be null!!");
                                            }
                                           localCR_MIN.serialize(new javax.xml.namespace.QName("","CR_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localCR_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CR_MAX cannot be null!!");
                                            }
                                           localCR_MAX.serialize(new javax.xml.namespace.QName("","CR_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localNI_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("NI_MIN cannot be null!!");
                                            }
                                           localNI_MIN.serialize(new javax.xml.namespace.QName("","NI_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localNI_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("NI_MAX cannot be null!!");
                                            }
                                           localNI_MAX.serialize(new javax.xml.namespace.QName("","NI_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localCU_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CU_MIN cannot be null!!");
                                            }
                                           localCU_MIN.serialize(new javax.xml.namespace.QName("","CU_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localCU_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CU_MAX cannot be null!!");
                                            }
                                           localCU_MAX.serialize(new javax.xml.namespace.QName("","CU_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localZR_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZR_MIN cannot be null!!");
                                            }
                                           localZR_MIN.serialize(new javax.xml.namespace.QName("","ZR_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localZR_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZR_MAX cannot be null!!");
                                            }
                                           localZR_MAX.serialize(new javax.xml.namespace.QName("","ZR_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localSN_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SN_MIN cannot be null!!");
                                            }
                                           localSN_MIN.serialize(new javax.xml.namespace.QName("","SN_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localSN_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SN_MAX cannot be null!!");
                                            }
                                           localSN_MAX.serialize(new javax.xml.namespace.QName("","SN_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localPB_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PB_MIN cannot be null!!");
                                            }
                                           localPB_MIN.serialize(new javax.xml.namespace.QName("","PB_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localPB_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PB_MAX cannot be null!!");
                                            }
                                           localPB_MAX.serialize(new javax.xml.namespace.QName("","PB_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localSB_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SB_MIN cannot be null!!");
                                            }
                                           localSB_MIN.serialize(new javax.xml.namespace.QName("","SB_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localSB_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SB_MAX cannot be null!!");
                                            }
                                           localSB_MAX.serialize(new javax.xml.namespace.QName("","SB_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localAS_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("AS_MIN cannot be null!!");
                                            }
                                           localAS_MIN.serialize(new javax.xml.namespace.QName("","AS_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localAS_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("AS_MAX cannot be null!!");
                                            }
                                           localAS_MAX.serialize(new javax.xml.namespace.QName("","AS_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localCO_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CO_MIN cannot be null!!");
                                            }
                                           localCO_MIN.serialize(new javax.xml.namespace.QName("","CO_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localCO_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CO_MAX cannot be null!!");
                                            }
                                           localCO_MAX.serialize(new javax.xml.namespace.QName("","CO_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localTA_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TA_MIN cannot be null!!");
                                            }
                                           localTA_MIN.serialize(new javax.xml.namespace.QName("","TA_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localTA_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TA_MAX cannot be null!!");
                                            }
                                           localTA_MAX.serialize(new javax.xml.namespace.QName("","TA_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localTA1_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TA1_MIN cannot be null!!");
                                            }
                                           localTA1_MIN.serialize(new javax.xml.namespace.QName("","TA1_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localTA1_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TA1_MAX cannot be null!!");
                                            }
                                           localTA1_MAX.serialize(new javax.xml.namespace.QName("","TA1_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localUSER1_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("USER1_MIN cannot be null!!");
                                            }
                                           localUSER1_MIN.serialize(new javax.xml.namespace.QName("","USER1_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localUSER1_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("USER1_MAX cannot be null!!");
                                            }
                                           localUSER1_MAX.serialize(new javax.xml.namespace.QName("","USER1_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localUSER2_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("USER2_MIN cannot be null!!");
                                            }
                                           localUSER2_MIN.serialize(new javax.xml.namespace.QName("","USER2_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localUSER2_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("USER2_MAX cannot be null!!");
                                            }
                                           localUSER2_MAX.serialize(new javax.xml.namespace.QName("","USER2_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localUSER3_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("USER3_MIN cannot be null!!");
                                            }
                                           localUSER3_MIN.serialize(new javax.xml.namespace.QName("","USER3_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localUSER3_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("USER3_MAX cannot be null!!");
                                            }
                                           localUSER3_MAX.serialize(new javax.xml.namespace.QName("","USER3_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localTS_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TS_MIN cannot be null!!");
                                            }
                                           localTS_MIN.serialize(new javax.xml.namespace.QName("","TS_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localTS_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TS_MAX cannot be null!!");
                                            }
                                           localTS_MAX.serialize(new javax.xml.namespace.QName("","TS_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localYS_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("YS_MIN cannot be null!!");
                                            }
                                           localYS_MIN.serialize(new javax.xml.namespace.QName("","YS_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localYS_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("YS_MAX cannot be null!!");
                                            }
                                           localYS_MAX.serialize(new javax.xml.namespace.QName("","YS_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localE_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("E_MIN cannot be null!!");
                                            }
                                           localE_MIN.serialize(new javax.xml.namespace.QName("","E_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localE_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("E_MAX cannot be null!!");
                                            }
                                           localE_MAX.serialize(new javax.xml.namespace.QName("","E_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localR_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("R_MIN cannot be null!!");
                                            }
                                           localR_MIN.serialize(new javax.xml.namespace.QName("","R_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localR_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("R_MAX cannot be null!!");
                                            }
                                           localR_MAX.serialize(new javax.xml.namespace.QName("","R_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localHB_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HB_MIN cannot be null!!");
                                            }
                                           localHB_MIN.serialize(new javax.xml.namespace.QName("","HB_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localHB_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HB_MAX cannot be null!!");
                                            }
                                           localHB_MAX.serialize(new javax.xml.namespace.QName("","HB_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localB_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("B_MAX cannot be null!!");
                                            }
                                           localB_MAX.serialize(new javax.xml.namespace.QName("","B_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localB_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("B_MIN cannot be null!!");
                                            }
                                           localB_MIN.serialize(new javax.xml.namespace.QName("","B_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localHEAT1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HEAT1 cannot be null!!");
                                            }
                                           localHEAT1.serialize(new javax.xml.namespace.QName("","HEAT1"),
                                               factory,xmlWriter);
                                        
                                            if (localHDSC1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HDSC1 cannot be null!!");
                                            }
                                           localHDSC1.serialize(new javax.xml.namespace.QName("","HDSC1"),
                                               factory,xmlWriter);
                                        
                                            if (localTEMP1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TEMP1 cannot be null!!");
                                            }
                                           localTEMP1.serialize(new javax.xml.namespace.QName("","TEMP1"),
                                               factory,xmlWriter);
                                        
                                            if (localTDSC1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TDSC1 cannot be null!!");
                                            }
                                           localTDSC1.serialize(new javax.xml.namespace.QName("","TDSC1"),
                                               factory,xmlWriter);
                                        
                                            if (localHOLD1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HOLD1 cannot be null!!");
                                            }
                                           localHOLD1.serialize(new javax.xml.namespace.QName("","HOLD1"),
                                               factory,xmlWriter);
                                        
                                            if (localHODSC1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HODSC1 cannot be null!!");
                                            }
                                           localHODSC1.serialize(new javax.xml.namespace.QName("","HODSC1"),
                                               factory,xmlWriter);
                                        
                                            if (localCOOL1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("COOL1 cannot be null!!");
                                            }
                                           localCOOL1.serialize(new javax.xml.namespace.QName("","COOL1"),
                                               factory,xmlWriter);
                                        
                                            if (localCDSC1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CDSC1 cannot be null!!");
                                            }
                                           localCDSC1.serialize(new javax.xml.namespace.QName("","CDSC1"),
                                               factory,xmlWriter);
                                        
                                            if (localFURN1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FURN1 cannot be null!!");
                                            }
                                           localFURN1.serialize(new javax.xml.namespace.QName("","FURN1"),
                                               factory,xmlWriter);
                                        
                                            if (localFDSC1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FDSC1 cannot be null!!");
                                            }
                                           localFDSC1.serialize(new javax.xml.namespace.QName("","FDSC1"),
                                               factory,xmlWriter);
                                        
                                            if (localHEAT2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HEAT2 cannot be null!!");
                                            }
                                           localHEAT2.serialize(new javax.xml.namespace.QName("","HEAT2"),
                                               factory,xmlWriter);
                                        
                                            if (localHDSC2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HDSC2 cannot be null!!");
                                            }
                                           localHDSC2.serialize(new javax.xml.namespace.QName("","HDSC2"),
                                               factory,xmlWriter);
                                        
                                            if (localTEMP2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TEMP2 cannot be null!!");
                                            }
                                           localTEMP2.serialize(new javax.xml.namespace.QName("","TEMP2"),
                                               factory,xmlWriter);
                                        
                                            if (localTDSC2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TDSC2 cannot be null!!");
                                            }
                                           localTDSC2.serialize(new javax.xml.namespace.QName("","TDSC2"),
                                               factory,xmlWriter);
                                        
                                            if (localHOLD2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HOLD2 cannot be null!!");
                                            }
                                           localHOLD2.serialize(new javax.xml.namespace.QName("","HOLD2"),
                                               factory,xmlWriter);
                                        
                                            if (localHODSC2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HODSC2 cannot be null!!");
                                            }
                                           localHODSC2.serialize(new javax.xml.namespace.QName("","HODSC2"),
                                               factory,xmlWriter);
                                        
                                            if (localCOOL2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("COOL2 cannot be null!!");
                                            }
                                           localCOOL2.serialize(new javax.xml.namespace.QName("","COOL2"),
                                               factory,xmlWriter);
                                        
                                            if (localCDSC2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CDSC2 cannot be null!!");
                                            }
                                           localCDSC2.serialize(new javax.xml.namespace.QName("","CDSC2"),
                                               factory,xmlWriter);
                                        
                                            if (localFURN2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FURN2 cannot be null!!");
                                            }
                                           localFURN2.serialize(new javax.xml.namespace.QName("","FURN2"),
                                               factory,xmlWriter);
                                        
                                            if (localFDSC2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FDSC2 cannot be null!!");
                                            }
                                           localFDSC2.serialize(new javax.xml.namespace.QName("","FDSC2"),
                                               factory,xmlWriter);
                                        
                                            if (localHEAT3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HEAT3 cannot be null!!");
                                            }
                                           localHEAT3.serialize(new javax.xml.namespace.QName("","HEAT3"),
                                               factory,xmlWriter);
                                        
                                            if (localHDSC3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HDSC3 cannot be null!!");
                                            }
                                           localHDSC3.serialize(new javax.xml.namespace.QName("","HDSC3"),
                                               factory,xmlWriter);
                                        
                                            if (localTEMP3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TEMP3 cannot be null!!");
                                            }
                                           localTEMP3.serialize(new javax.xml.namespace.QName("","TEMP3"),
                                               factory,xmlWriter);
                                        
                                            if (localTDSC3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TDSC3 cannot be null!!");
                                            }
                                           localTDSC3.serialize(new javax.xml.namespace.QName("","TDSC3"),
                                               factory,xmlWriter);
                                        
                                            if (localHOLD3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HOLD3 cannot be null!!");
                                            }
                                           localHOLD3.serialize(new javax.xml.namespace.QName("","HOLD3"),
                                               factory,xmlWriter);
                                        
                                            if (localHODSC3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HODSC3 cannot be null!!");
                                            }
                                           localHODSC3.serialize(new javax.xml.namespace.QName("","HODSC3"),
                                               factory,xmlWriter);
                                        
                                            if (localCOOL3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("COOL3 cannot be null!!");
                                            }
                                           localCOOL3.serialize(new javax.xml.namespace.QName("","COOL3"),
                                               factory,xmlWriter);
                                        
                                            if (localCDSC3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CDSC3 cannot be null!!");
                                            }
                                           localCDSC3.serialize(new javax.xml.namespace.QName("","CDSC3"),
                                               factory,xmlWriter);
                                        
                                            if (localFURN3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FURN3 cannot be null!!");
                                            }
                                           localFURN3.serialize(new javax.xml.namespace.QName("","FURN3"),
                                               factory,xmlWriter);
                                        
                                            if (localFDSC3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FDSC3 cannot be null!!");
                                            }
                                           localFDSC3.serialize(new javax.xml.namespace.QName("","FDSC3"),
                                               factory,xmlWriter);
                                        
                                            if (localHEAT4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HEAT4 cannot be null!!");
                                            }
                                           localHEAT4.serialize(new javax.xml.namespace.QName("","HEAT4"),
                                               factory,xmlWriter);
                                        
                                            if (localHDSC4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HDSC4 cannot be null!!");
                                            }
                                           localHDSC4.serialize(new javax.xml.namespace.QName("","HDSC4"),
                                               factory,xmlWriter);
                                        
                                            if (localTEMP4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TEMP4 cannot be null!!");
                                            }
                                           localTEMP4.serialize(new javax.xml.namespace.QName("","TEMP4"),
                                               factory,xmlWriter);
                                        
                                            if (localHOLD4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HOLD4 cannot be null!!");
                                            }
                                           localHOLD4.serialize(new javax.xml.namespace.QName("","HOLD4"),
                                               factory,xmlWriter);
                                        
                                            if (localHODSC4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HODSC4 cannot be null!!");
                                            }
                                           localHODSC4.serialize(new javax.xml.namespace.QName("","HODSC4"),
                                               factory,xmlWriter);
                                        
                                            if (localCOOL4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("COOL4 cannot be null!!");
                                            }
                                           localCOOL4.serialize(new javax.xml.namespace.QName("","COOL4"),
                                               factory,xmlWriter);
                                        
                                            if (localCDSC4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CDSC4 cannot be null!!");
                                            }
                                           localCDSC4.serialize(new javax.xml.namespace.QName("","CDSC4"),
                                               factory,xmlWriter);
                                        
                                            if (localFE_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FE_MAX cannot be null!!");
                                            }
                                           localFE_MAX.serialize(new javax.xml.namespace.QName("","FE_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localFE_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FE_MIN cannot be null!!");
                                            }
                                           localFE_MIN.serialize(new javax.xml.namespace.QName("","FE_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localMO_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MO_MIN cannot be null!!");
                                            }
                                           localMO_MIN.serialize(new javax.xml.namespace.QName("","MO_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localMO_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MO_MAX cannot be null!!");
                                            }
                                           localMO_MAX.serialize(new javax.xml.namespace.QName("","MO_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localV_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("V_MIN cannot be null!!");
                                            }
                                           localV_MIN.serialize(new javax.xml.namespace.QName("","V_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localV_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("V_MAX cannot be null!!");
                                            }
                                           localV_MAX.serialize(new javax.xml.namespace.QName("","V_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localAL_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("AL_MIN cannot be null!!");
                                            }
                                           localAL_MIN.serialize(new javax.xml.namespace.QName("","AL_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localAL_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("AL_MAX cannot be null!!");
                                            }
                                           localAL_MAX.serialize(new javax.xml.namespace.QName("","AL_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localNB_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("NB_MIN cannot be null!!");
                                            }
                                           localNB_MIN.serialize(new javax.xml.namespace.QName("","NB_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localNB_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("NB_MAX cannot be null!!");
                                            }
                                           localNB_MAX.serialize(new javax.xml.namespace.QName("","NB_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localW_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("W_MIN cannot be null!!");
                                            }
                                           localW_MIN.serialize(new javax.xml.namespace.QName("","W_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localW_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("W_MAX cannot be null!!");
                                            }
                                           localW_MAX.serialize(new javax.xml.namespace.QName("","W_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localZN_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZN_MIN cannot be null!!");
                                            }
                                           localZN_MIN.serialize(new javax.xml.namespace.QName("","ZN_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localZN_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZN_MAX cannot be null!!");
                                            }
                                           localZN_MAX.serialize(new javax.xml.namespace.QName("","ZN_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localTI_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TI_MIN cannot be null!!");
                                            }
                                           localTI_MIN.serialize(new javax.xml.namespace.QName("","TI_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localTI_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TI_MAX cannot be null!!");
                                            }
                                           localTI_MAX.serialize(new javax.xml.namespace.QName("","TI_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localN_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("N_MIN cannot be null!!");
                                            }
                                           localN_MIN.serialize(new javax.xml.namespace.QName("","N_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localN_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("N_MAX cannot be null!!");
                                            }
                                           localN_MAX.serialize(new javax.xml.namespace.QName("","N_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localFREE1_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FREE1_MIN cannot be null!!");
                                            }
                                           localFREE1_MIN.serialize(new javax.xml.namespace.QName("","FREE1_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localFREE1_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FREE1_MAX cannot be null!!");
                                            }
                                           localFREE1_MAX.serialize(new javax.xml.namespace.QName("","FREE1_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localFREE2_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FREE2_MIN cannot be null!!");
                                            }
                                           localFREE2_MIN.serialize(new javax.xml.namespace.QName("","FREE2_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localFREE2_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FREE2_MAX cannot be null!!");
                                            }
                                           localFREE2_MAX.serialize(new javax.xml.namespace.QName("","FREE2_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localFREE3_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FREE3_MIN cannot be null!!");
                                            }
                                           localFREE3_MIN.serialize(new javax.xml.namespace.QName("","FREE3_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localFREE3_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FREE3_MAX cannot be null!!");
                                            }
                                           localFREE3_MAX.serialize(new javax.xml.namespace.QName("","FREE3_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localFREE1_MIN_DES==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FREE1_MIN_DES cannot be null!!");
                                            }
                                           localFREE1_MIN_DES.serialize(new javax.xml.namespace.QName("","FREE1_MIN_DES"),
                                               factory,xmlWriter);
                                        
                                            if (localFREE1_MAX_DES==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FREE1_MAX_DES cannot be null!!");
                                            }
                                           localFREE1_MAX_DES.serialize(new javax.xml.namespace.QName("","FREE1_MAX_DES"),
                                               factory,xmlWriter);
                                        
                                            if (localFREE2_MIN_DES==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FREE2_MIN_DES cannot be null!!");
                                            }
                                           localFREE2_MIN_DES.serialize(new javax.xml.namespace.QName("","FREE2_MIN_DES"),
                                               factory,xmlWriter);
                                        
                                            if (localFREE2_MAX_DES==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FREE2_MAX_DES cannot be null!!");
                                            }
                                           localFREE2_MAX_DES.serialize(new javax.xml.namespace.QName("","FREE2_MAX_DES"),
                                               factory,xmlWriter);
                                        
                                            if (localFREE3_MIN_DES==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FREE3_MIN_DES cannot be null!!");
                                            }
                                           localFREE3_MIN_DES.serialize(new javax.xml.namespace.QName("","FREE3_MIN_DES"),
                                               factory,xmlWriter);
                                        
                                            if (localFREE3_MAX_DES==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FREE3_MAX_DES cannot be null!!");
                                            }
                                           localFREE3_MAX_DES.serialize(new javax.xml.namespace.QName("","FREE3_MAX_DES"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_TEMP==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_TEMP cannot be null!!");
                                            }
                                           localJ_TEMP.serialize(new javax.xml.namespace.QName("","J_TEMP"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_AVG==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_AVG cannot be null!!");
                                            }
                                           localJ_AVG.serialize(new javax.xml.namespace.QName("","J_AVG"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_MIN cannot be null!!");
                                            }
                                           localJ_MIN.serialize(new javax.xml.namespace.QName("","J_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_TEMP2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_TEMP2 cannot be null!!");
                                            }
                                           localJ_TEMP2.serialize(new javax.xml.namespace.QName("","J_TEMP2"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_AVG2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_AVG2 cannot be null!!");
                                            }
                                           localJ_AVG2.serialize(new javax.xml.namespace.QName("","J_AVG2"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_MIN2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_MIN2 cannot be null!!");
                                            }
                                           localJ_MIN2.serialize(new javax.xml.namespace.QName("","J_MIN2"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_TEMP3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_TEMP3 cannot be null!!");
                                            }
                                           localJ_TEMP3.serialize(new javax.xml.namespace.QName("","J_TEMP3"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_AVG3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_AVG3 cannot be null!!");
                                            }
                                           localJ_AVG3.serialize(new javax.xml.namespace.QName("","J_AVG3"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_MIN3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_MIN3 cannot be null!!");
                                            }
                                           localJ_MIN3.serialize(new javax.xml.namespace.QName("","J_MIN3"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_TEMP4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_TEMP4 cannot be null!!");
                                            }
                                           localJ_TEMP4.serialize(new javax.xml.namespace.QName("","J_TEMP4"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_AVG4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_AVG4 cannot be null!!");
                                            }
                                           localJ_AVG4.serialize(new javax.xml.namespace.QName("","J_AVG4"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_MIN4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_MIN4 cannot be null!!");
                                            }
                                           localJ_MIN4.serialize(new javax.xml.namespace.QName("","J_MIN4"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_TEMP5==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_TEMP5 cannot be null!!");
                                            }
                                           localJ_TEMP5.serialize(new javax.xml.namespace.QName("","J_TEMP5"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_AVG5==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_AVG5 cannot be null!!");
                                            }
                                           localJ_AVG5.serialize(new javax.xml.namespace.QName("","J_AVG5"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_MIN5==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_MIN5 cannot be null!!");
                                            }
                                           localJ_MIN5.serialize(new javax.xml.namespace.QName("","J_MIN5"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_TEMP6==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_TEMP6 cannot be null!!");
                                            }
                                           localJ_TEMP6.serialize(new javax.xml.namespace.QName("","J_TEMP6"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_AVG6==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_AVG6 cannot be null!!");
                                            }
                                           localJ_AVG6.serialize(new javax.xml.namespace.QName("","J_AVG6"),
                                               factory,xmlWriter);
                                        
                                            if (localJ_MIN6==null){
                                                 throw new org.apache.axis2.databinding.ADBException("J_MIN6 cannot be null!!");
                                            }
                                           localJ_MIN6.serialize(new javax.xml.namespace.QName("","J_MIN6"),
                                               factory,xmlWriter);
                                        
                                            if (localZIDUAN_STR==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZIDUAN_STR cannot be null!!");
                                            }
                                           localZIDUAN_STR.serialize(new javax.xml.namespace.QName("","ZIDUAN_STR"),
                                               factory,xmlWriter);
                                        
                                            if (localYS2_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("YS2_MIN cannot be null!!");
                                            }
                                           localYS2_MIN.serialize(new javax.xml.namespace.QName("","YS2_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localYS2_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("YS2_MAX cannot be null!!");
                                            }
                                           localYS2_MAX.serialize(new javax.xml.namespace.QName("","YS2_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localPT==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PT cannot be null!!");
                                            }
                                           localPT.serialize(new javax.xml.namespace.QName("","PT"),
                                               factory,xmlWriter);
                                        
                                            if (localCE_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CE_MAX cannot be null!!");
                                            }
                                           localCE_MAX.serialize(new javax.xml.namespace.QName("","CE_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localPREN_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PREN_MIN cannot be null!!");
                                            }
                                           localPREN_MIN.serialize(new javax.xml.namespace.QName("","PREN_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localPREN_B==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PREN_B cannot be null!!");
                                            }
                                           localPREN_B.serialize(new javax.xml.namespace.QName("","PREN_B"),
                                               factory,xmlWriter);
                                        
                                            if (localZFE_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZFE_MIN cannot be null!!");
                                            }
                                           localZFE_MIN.serialize(new javax.xml.namespace.QName("","ZFE_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localZFE_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZFE_MAX cannot be null!!");
                                            }
                                           localZFE_MAX.serialize(new javax.xml.namespace.QName("","ZFE_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localZCA_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZCA_MIN cannot be null!!");
                                            }
                                           localZCA_MIN.serialize(new javax.xml.namespace.QName("","ZCA_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localZCA_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZCA_MAX cannot be null!!");
                                            }
                                           localZCA_MAX.serialize(new javax.xml.namespace.QName("","ZCA_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localH_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("H_MIN cannot be null!!");
                                            }
                                           localH_MIN.serialize(new javax.xml.namespace.QName("","H_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localH_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("H_MAX cannot be null!!");
                                            }
                                           localH_MAX.serialize(new javax.xml.namespace.QName("","H_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localO_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("O_MIN cannot be null!!");
                                            }
                                           localO_MIN.serialize(new javax.xml.namespace.QName("","O_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localO_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("O_MAX cannot be null!!");
                                            }
                                           localO_MAX.serialize(new javax.xml.namespace.QName("","O_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localGTS_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("GTS_MIN cannot be null!!");
                                            }
                                           localGTS_MIN.serialize(new javax.xml.namespace.QName("","GTS_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localGTS_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("GTS_MAX cannot be null!!");
                                            }
                                           localGTS_MAX.serialize(new javax.xml.namespace.QName("","GTS_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localGYS_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("GYS_MIN cannot be null!!");
                                            }
                                           localGYS_MIN.serialize(new javax.xml.namespace.QName("","GYS_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localGYS_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("GYS_MAX cannot be null!!");
                                            }
                                           localGYS_MAX.serialize(new javax.xml.namespace.QName("","GYS_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localGE_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("GE_MIN cannot be null!!");
                                            }
                                           localGE_MIN.serialize(new javax.xml.namespace.QName("","GE_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localGE_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("GE_MAX cannot be null!!");
                                            }
                                           localGE_MAX.serialize(new javax.xml.namespace.QName("","GE_MAX"),
                                               factory,xmlWriter);
                                        
                                            if (localGR_MIN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("GR_MIN cannot be null!!");
                                            }
                                           localGR_MIN.serialize(new javax.xml.namespace.QName("","GR_MIN"),
                                               factory,xmlWriter);
                                        
                                            if (localGR_MAX==null){
                                                 throw new org.apache.axis2.databinding.ADBException("GR_MAX cannot be null!!");
                                            }
                                           localGR_MAX.serialize(new javax.xml.namespace.QName("","GR_MAX"),
                                               factory,xmlWriter);
                                        
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "MANDT"));
                            
                            
                                    if (localMANDT==null){
                                         throw new org.apache.axis2.databinding.ADBException("MANDT cannot be null!!");
                                    }
                                    elementList.add(localMANDT);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZCZ"));
                            
                            
                                    if (localZCZ==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZCZ cannot be null!!");
                                    }
                                    elementList.add(localZCZ);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "VBELN"));
                            
                            
                                    if (localVBELN==null){
                                         throw new org.apache.axis2.databinding.ADBException("VBELN cannot be null!!");
                                    }
                                    elementList.add(localVBELN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "POSNR"));
                            
                            
                                    if (localPOSNR==null){
                                         throw new org.apache.axis2.databinding.ADBException("POSNR cannot be null!!");
                                    }
                                    elementList.add(localPOSNR);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "STD"));
                            
                            
                                    if (localSTD==null){
                                         throw new org.apache.axis2.databinding.ADBException("STD cannot be null!!");
                                    }
                                    elementList.add(localSTD);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "SPECIFICATE"));
                            
                            
                                    if (localSPECIFICATE==null){
                                         throw new org.apache.axis2.databinding.ADBException("SPECIFICATE cannot be null!!");
                                    }
                                    elementList.add(localSPECIFICATE);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CE"));
                            
                            
                                    if (localCE==null){
                                         throw new org.apache.axis2.databinding.ADBException("CE cannot be null!!");
                                    }
                                    elementList.add(localCE);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "PREN"));
                            
                            
                                    if (localPREN==null){
                                         throw new org.apache.axis2.databinding.ADBException("PREN cannot be null!!");
                                    }
                                    elementList.add(localPREN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZDEL"));
                            
                            
                                    if (localZDEL==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZDEL cannot be null!!");
                                    }
                                    elementList.add(localZDEL);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CDATE"));
                            
                            
                                    if (localCDATE==null){
                                         throw new org.apache.axis2.databinding.ADBException("CDATE cannot be null!!");
                                    }
                                    elementList.add(localCDATE);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "MDATE"));
                            
                            
                                    if (localMDATE==null){
                                         throw new org.apache.axis2.databinding.ADBException("MDATE cannot be null!!");
                                    }
                                    elementList.add(localMDATE);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CUSER"));
                            
                            
                                    if (localCUSER==null){
                                         throw new org.apache.axis2.databinding.ADBException("CUSER cannot be null!!");
                                    }
                                    elementList.add(localCUSER);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "MUSER"));
                            
                            
                                    if (localMUSER==null){
                                         throw new org.apache.axis2.databinding.ADBException("MUSER cannot be null!!");
                                    }
                                    elementList.add(localMUSER);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "C_MIN"));
                            
                            
                                    if (localC_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("C_MIN cannot be null!!");
                                    }
                                    elementList.add(localC_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "C_MAX"));
                            
                            
                                    if (localC_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("C_MAX cannot be null!!");
                                    }
                                    elementList.add(localC_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "SI_MIN"));
                            
                            
                                    if (localSI_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("SI_MIN cannot be null!!");
                                    }
                                    elementList.add(localSI_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "SI_MAX"));
                            
                            
                                    if (localSI_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("SI_MAX cannot be null!!");
                                    }
                                    elementList.add(localSI_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "MN_MIN"));
                            
                            
                                    if (localMN_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("MN_MIN cannot be null!!");
                                    }
                                    elementList.add(localMN_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "MN_MAX"));
                            
                            
                                    if (localMN_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("MN_MAX cannot be null!!");
                                    }
                                    elementList.add(localMN_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "P_MIN"));
                            
                            
                                    if (localP_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("P_MIN cannot be null!!");
                                    }
                                    elementList.add(localP_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "P_MAX"));
                            
                            
                                    if (localP_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("P_MAX cannot be null!!");
                                    }
                                    elementList.add(localP_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "S_MIN"));
                            
                            
                                    if (localS_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("S_MIN cannot be null!!");
                                    }
                                    elementList.add(localS_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "S_MAX"));
                            
                            
                                    if (localS_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("S_MAX cannot be null!!");
                                    }
                                    elementList.add(localS_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CR_MIN"));
                            
                            
                                    if (localCR_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("CR_MIN cannot be null!!");
                                    }
                                    elementList.add(localCR_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CR_MAX"));
                            
                            
                                    if (localCR_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("CR_MAX cannot be null!!");
                                    }
                                    elementList.add(localCR_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "NI_MIN"));
                            
                            
                                    if (localNI_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("NI_MIN cannot be null!!");
                                    }
                                    elementList.add(localNI_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "NI_MAX"));
                            
                            
                                    if (localNI_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("NI_MAX cannot be null!!");
                                    }
                                    elementList.add(localNI_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CU_MIN"));
                            
                            
                                    if (localCU_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("CU_MIN cannot be null!!");
                                    }
                                    elementList.add(localCU_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CU_MAX"));
                            
                            
                                    if (localCU_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("CU_MAX cannot be null!!");
                                    }
                                    elementList.add(localCU_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZR_MIN"));
                            
                            
                                    if (localZR_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZR_MIN cannot be null!!");
                                    }
                                    elementList.add(localZR_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZR_MAX"));
                            
                            
                                    if (localZR_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZR_MAX cannot be null!!");
                                    }
                                    elementList.add(localZR_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "SN_MIN"));
                            
                            
                                    if (localSN_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("SN_MIN cannot be null!!");
                                    }
                                    elementList.add(localSN_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "SN_MAX"));
                            
                            
                                    if (localSN_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("SN_MAX cannot be null!!");
                                    }
                                    elementList.add(localSN_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "PB_MIN"));
                            
                            
                                    if (localPB_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("PB_MIN cannot be null!!");
                                    }
                                    elementList.add(localPB_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "PB_MAX"));
                            
                            
                                    if (localPB_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("PB_MAX cannot be null!!");
                                    }
                                    elementList.add(localPB_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "SB_MIN"));
                            
                            
                                    if (localSB_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("SB_MIN cannot be null!!");
                                    }
                                    elementList.add(localSB_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "SB_MAX"));
                            
                            
                                    if (localSB_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("SB_MAX cannot be null!!");
                                    }
                                    elementList.add(localSB_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "AS_MIN"));
                            
                            
                                    if (localAS_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("AS_MIN cannot be null!!");
                                    }
                                    elementList.add(localAS_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "AS_MAX"));
                            
                            
                                    if (localAS_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("AS_MAX cannot be null!!");
                                    }
                                    elementList.add(localAS_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CO_MIN"));
                            
                            
                                    if (localCO_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("CO_MIN cannot be null!!");
                                    }
                                    elementList.add(localCO_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CO_MAX"));
                            
                            
                                    if (localCO_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("CO_MAX cannot be null!!");
                                    }
                                    elementList.add(localCO_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TA_MIN"));
                            
                            
                                    if (localTA_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("TA_MIN cannot be null!!");
                                    }
                                    elementList.add(localTA_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TA_MAX"));
                            
                            
                                    if (localTA_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("TA_MAX cannot be null!!");
                                    }
                                    elementList.add(localTA_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TA1_MIN"));
                            
                            
                                    if (localTA1_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("TA1_MIN cannot be null!!");
                                    }
                                    elementList.add(localTA1_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TA1_MAX"));
                            
                            
                                    if (localTA1_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("TA1_MAX cannot be null!!");
                                    }
                                    elementList.add(localTA1_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "USER1_MIN"));
                            
                            
                                    if (localUSER1_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("USER1_MIN cannot be null!!");
                                    }
                                    elementList.add(localUSER1_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "USER1_MAX"));
                            
                            
                                    if (localUSER1_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("USER1_MAX cannot be null!!");
                                    }
                                    elementList.add(localUSER1_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "USER2_MIN"));
                            
                            
                                    if (localUSER2_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("USER2_MIN cannot be null!!");
                                    }
                                    elementList.add(localUSER2_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "USER2_MAX"));
                            
                            
                                    if (localUSER2_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("USER2_MAX cannot be null!!");
                                    }
                                    elementList.add(localUSER2_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "USER3_MIN"));
                            
                            
                                    if (localUSER3_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("USER3_MIN cannot be null!!");
                                    }
                                    elementList.add(localUSER3_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "USER3_MAX"));
                            
                            
                                    if (localUSER3_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("USER3_MAX cannot be null!!");
                                    }
                                    elementList.add(localUSER3_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TS_MIN"));
                            
                            
                                    if (localTS_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("TS_MIN cannot be null!!");
                                    }
                                    elementList.add(localTS_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TS_MAX"));
                            
                            
                                    if (localTS_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("TS_MAX cannot be null!!");
                                    }
                                    elementList.add(localTS_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "YS_MIN"));
                            
                            
                                    if (localYS_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("YS_MIN cannot be null!!");
                                    }
                                    elementList.add(localYS_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "YS_MAX"));
                            
                            
                                    if (localYS_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("YS_MAX cannot be null!!");
                                    }
                                    elementList.add(localYS_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "E_MIN"));
                            
                            
                                    if (localE_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("E_MIN cannot be null!!");
                                    }
                                    elementList.add(localE_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "E_MAX"));
                            
                            
                                    if (localE_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("E_MAX cannot be null!!");
                                    }
                                    elementList.add(localE_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "R_MIN"));
                            
                            
                                    if (localR_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("R_MIN cannot be null!!");
                                    }
                                    elementList.add(localR_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "R_MAX"));
                            
                            
                                    if (localR_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("R_MAX cannot be null!!");
                                    }
                                    elementList.add(localR_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HB_MIN"));
                            
                            
                                    if (localHB_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("HB_MIN cannot be null!!");
                                    }
                                    elementList.add(localHB_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HB_MAX"));
                            
                            
                                    if (localHB_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("HB_MAX cannot be null!!");
                                    }
                                    elementList.add(localHB_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "B_MAX"));
                            
                            
                                    if (localB_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("B_MAX cannot be null!!");
                                    }
                                    elementList.add(localB_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "B_MIN"));
                            
                            
                                    if (localB_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("B_MIN cannot be null!!");
                                    }
                                    elementList.add(localB_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HEAT1"));
                            
                            
                                    if (localHEAT1==null){
                                         throw new org.apache.axis2.databinding.ADBException("HEAT1 cannot be null!!");
                                    }
                                    elementList.add(localHEAT1);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HDSC1"));
                            
                            
                                    if (localHDSC1==null){
                                         throw new org.apache.axis2.databinding.ADBException("HDSC1 cannot be null!!");
                                    }
                                    elementList.add(localHDSC1);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TEMP1"));
                            
                            
                                    if (localTEMP1==null){
                                         throw new org.apache.axis2.databinding.ADBException("TEMP1 cannot be null!!");
                                    }
                                    elementList.add(localTEMP1);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TDSC1"));
                            
                            
                                    if (localTDSC1==null){
                                         throw new org.apache.axis2.databinding.ADBException("TDSC1 cannot be null!!");
                                    }
                                    elementList.add(localTDSC1);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HOLD1"));
                            
                            
                                    if (localHOLD1==null){
                                         throw new org.apache.axis2.databinding.ADBException("HOLD1 cannot be null!!");
                                    }
                                    elementList.add(localHOLD1);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HODSC1"));
                            
                            
                                    if (localHODSC1==null){
                                         throw new org.apache.axis2.databinding.ADBException("HODSC1 cannot be null!!");
                                    }
                                    elementList.add(localHODSC1);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "COOL1"));
                            
                            
                                    if (localCOOL1==null){
                                         throw new org.apache.axis2.databinding.ADBException("COOL1 cannot be null!!");
                                    }
                                    elementList.add(localCOOL1);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CDSC1"));
                            
                            
                                    if (localCDSC1==null){
                                         throw new org.apache.axis2.databinding.ADBException("CDSC1 cannot be null!!");
                                    }
                                    elementList.add(localCDSC1);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FURN1"));
                            
                            
                                    if (localFURN1==null){
                                         throw new org.apache.axis2.databinding.ADBException("FURN1 cannot be null!!");
                                    }
                                    elementList.add(localFURN1);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FDSC1"));
                            
                            
                                    if (localFDSC1==null){
                                         throw new org.apache.axis2.databinding.ADBException("FDSC1 cannot be null!!");
                                    }
                                    elementList.add(localFDSC1);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HEAT2"));
                            
                            
                                    if (localHEAT2==null){
                                         throw new org.apache.axis2.databinding.ADBException("HEAT2 cannot be null!!");
                                    }
                                    elementList.add(localHEAT2);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HDSC2"));
                            
                            
                                    if (localHDSC2==null){
                                         throw new org.apache.axis2.databinding.ADBException("HDSC2 cannot be null!!");
                                    }
                                    elementList.add(localHDSC2);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TEMP2"));
                            
                            
                                    if (localTEMP2==null){
                                         throw new org.apache.axis2.databinding.ADBException("TEMP2 cannot be null!!");
                                    }
                                    elementList.add(localTEMP2);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TDSC2"));
                            
                            
                                    if (localTDSC2==null){
                                         throw new org.apache.axis2.databinding.ADBException("TDSC2 cannot be null!!");
                                    }
                                    elementList.add(localTDSC2);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HOLD2"));
                            
                            
                                    if (localHOLD2==null){
                                         throw new org.apache.axis2.databinding.ADBException("HOLD2 cannot be null!!");
                                    }
                                    elementList.add(localHOLD2);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HODSC2"));
                            
                            
                                    if (localHODSC2==null){
                                         throw new org.apache.axis2.databinding.ADBException("HODSC2 cannot be null!!");
                                    }
                                    elementList.add(localHODSC2);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "COOL2"));
                            
                            
                                    if (localCOOL2==null){
                                         throw new org.apache.axis2.databinding.ADBException("COOL2 cannot be null!!");
                                    }
                                    elementList.add(localCOOL2);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CDSC2"));
                            
                            
                                    if (localCDSC2==null){
                                         throw new org.apache.axis2.databinding.ADBException("CDSC2 cannot be null!!");
                                    }
                                    elementList.add(localCDSC2);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FURN2"));
                            
                            
                                    if (localFURN2==null){
                                         throw new org.apache.axis2.databinding.ADBException("FURN2 cannot be null!!");
                                    }
                                    elementList.add(localFURN2);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FDSC2"));
                            
                            
                                    if (localFDSC2==null){
                                         throw new org.apache.axis2.databinding.ADBException("FDSC2 cannot be null!!");
                                    }
                                    elementList.add(localFDSC2);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HEAT3"));
                            
                            
                                    if (localHEAT3==null){
                                         throw new org.apache.axis2.databinding.ADBException("HEAT3 cannot be null!!");
                                    }
                                    elementList.add(localHEAT3);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HDSC3"));
                            
                            
                                    if (localHDSC3==null){
                                         throw new org.apache.axis2.databinding.ADBException("HDSC3 cannot be null!!");
                                    }
                                    elementList.add(localHDSC3);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TEMP3"));
                            
                            
                                    if (localTEMP3==null){
                                         throw new org.apache.axis2.databinding.ADBException("TEMP3 cannot be null!!");
                                    }
                                    elementList.add(localTEMP3);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TDSC3"));
                            
                            
                                    if (localTDSC3==null){
                                         throw new org.apache.axis2.databinding.ADBException("TDSC3 cannot be null!!");
                                    }
                                    elementList.add(localTDSC3);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HOLD3"));
                            
                            
                                    if (localHOLD3==null){
                                         throw new org.apache.axis2.databinding.ADBException("HOLD3 cannot be null!!");
                                    }
                                    elementList.add(localHOLD3);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HODSC3"));
                            
                            
                                    if (localHODSC3==null){
                                         throw new org.apache.axis2.databinding.ADBException("HODSC3 cannot be null!!");
                                    }
                                    elementList.add(localHODSC3);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "COOL3"));
                            
                            
                                    if (localCOOL3==null){
                                         throw new org.apache.axis2.databinding.ADBException("COOL3 cannot be null!!");
                                    }
                                    elementList.add(localCOOL3);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CDSC3"));
                            
                            
                                    if (localCDSC3==null){
                                         throw new org.apache.axis2.databinding.ADBException("CDSC3 cannot be null!!");
                                    }
                                    elementList.add(localCDSC3);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FURN3"));
                            
                            
                                    if (localFURN3==null){
                                         throw new org.apache.axis2.databinding.ADBException("FURN3 cannot be null!!");
                                    }
                                    elementList.add(localFURN3);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FDSC3"));
                            
                            
                                    if (localFDSC3==null){
                                         throw new org.apache.axis2.databinding.ADBException("FDSC3 cannot be null!!");
                                    }
                                    elementList.add(localFDSC3);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HEAT4"));
                            
                            
                                    if (localHEAT4==null){
                                         throw new org.apache.axis2.databinding.ADBException("HEAT4 cannot be null!!");
                                    }
                                    elementList.add(localHEAT4);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HDSC4"));
                            
                            
                                    if (localHDSC4==null){
                                         throw new org.apache.axis2.databinding.ADBException("HDSC4 cannot be null!!");
                                    }
                                    elementList.add(localHDSC4);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TEMP4"));
                            
                            
                                    if (localTEMP4==null){
                                         throw new org.apache.axis2.databinding.ADBException("TEMP4 cannot be null!!");
                                    }
                                    elementList.add(localTEMP4);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HOLD4"));
                            
                            
                                    if (localHOLD4==null){
                                         throw new org.apache.axis2.databinding.ADBException("HOLD4 cannot be null!!");
                                    }
                                    elementList.add(localHOLD4);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "HODSC4"));
                            
                            
                                    if (localHODSC4==null){
                                         throw new org.apache.axis2.databinding.ADBException("HODSC4 cannot be null!!");
                                    }
                                    elementList.add(localHODSC4);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "COOL4"));
                            
                            
                                    if (localCOOL4==null){
                                         throw new org.apache.axis2.databinding.ADBException("COOL4 cannot be null!!");
                                    }
                                    elementList.add(localCOOL4);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CDSC4"));
                            
                            
                                    if (localCDSC4==null){
                                         throw new org.apache.axis2.databinding.ADBException("CDSC4 cannot be null!!");
                                    }
                                    elementList.add(localCDSC4);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FE_MAX"));
                            
                            
                                    if (localFE_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("FE_MAX cannot be null!!");
                                    }
                                    elementList.add(localFE_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FE_MIN"));
                            
                            
                                    if (localFE_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("FE_MIN cannot be null!!");
                                    }
                                    elementList.add(localFE_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "MO_MIN"));
                            
                            
                                    if (localMO_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("MO_MIN cannot be null!!");
                                    }
                                    elementList.add(localMO_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "MO_MAX"));
                            
                            
                                    if (localMO_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("MO_MAX cannot be null!!");
                                    }
                                    elementList.add(localMO_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "V_MIN"));
                            
                            
                                    if (localV_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("V_MIN cannot be null!!");
                                    }
                                    elementList.add(localV_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "V_MAX"));
                            
                            
                                    if (localV_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("V_MAX cannot be null!!");
                                    }
                                    elementList.add(localV_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "AL_MIN"));
                            
                            
                                    if (localAL_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("AL_MIN cannot be null!!");
                                    }
                                    elementList.add(localAL_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "AL_MAX"));
                            
                            
                                    if (localAL_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("AL_MAX cannot be null!!");
                                    }
                                    elementList.add(localAL_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "NB_MIN"));
                            
                            
                                    if (localNB_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("NB_MIN cannot be null!!");
                                    }
                                    elementList.add(localNB_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "NB_MAX"));
                            
                            
                                    if (localNB_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("NB_MAX cannot be null!!");
                                    }
                                    elementList.add(localNB_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "W_MIN"));
                            
                            
                                    if (localW_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("W_MIN cannot be null!!");
                                    }
                                    elementList.add(localW_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "W_MAX"));
                            
                            
                                    if (localW_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("W_MAX cannot be null!!");
                                    }
                                    elementList.add(localW_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZN_MIN"));
                            
                            
                                    if (localZN_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZN_MIN cannot be null!!");
                                    }
                                    elementList.add(localZN_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZN_MAX"));
                            
                            
                                    if (localZN_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZN_MAX cannot be null!!");
                                    }
                                    elementList.add(localZN_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TI_MIN"));
                            
                            
                                    if (localTI_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("TI_MIN cannot be null!!");
                                    }
                                    elementList.add(localTI_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "TI_MAX"));
                            
                            
                                    if (localTI_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("TI_MAX cannot be null!!");
                                    }
                                    elementList.add(localTI_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "N_MIN"));
                            
                            
                                    if (localN_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("N_MIN cannot be null!!");
                                    }
                                    elementList.add(localN_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "N_MAX"));
                            
                            
                                    if (localN_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("N_MAX cannot be null!!");
                                    }
                                    elementList.add(localN_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FREE1_MIN"));
                            
                            
                                    if (localFREE1_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("FREE1_MIN cannot be null!!");
                                    }
                                    elementList.add(localFREE1_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FREE1_MAX"));
                            
                            
                                    if (localFREE1_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("FREE1_MAX cannot be null!!");
                                    }
                                    elementList.add(localFREE1_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FREE2_MIN"));
                            
                            
                                    if (localFREE2_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("FREE2_MIN cannot be null!!");
                                    }
                                    elementList.add(localFREE2_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FREE2_MAX"));
                            
                            
                                    if (localFREE2_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("FREE2_MAX cannot be null!!");
                                    }
                                    elementList.add(localFREE2_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FREE3_MIN"));
                            
                            
                                    if (localFREE3_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("FREE3_MIN cannot be null!!");
                                    }
                                    elementList.add(localFREE3_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FREE3_MAX"));
                            
                            
                                    if (localFREE3_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("FREE3_MAX cannot be null!!");
                                    }
                                    elementList.add(localFREE3_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FREE1_MIN_DES"));
                            
                            
                                    if (localFREE1_MIN_DES==null){
                                         throw new org.apache.axis2.databinding.ADBException("FREE1_MIN_DES cannot be null!!");
                                    }
                                    elementList.add(localFREE1_MIN_DES);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FREE1_MAX_DES"));
                            
                            
                                    if (localFREE1_MAX_DES==null){
                                         throw new org.apache.axis2.databinding.ADBException("FREE1_MAX_DES cannot be null!!");
                                    }
                                    elementList.add(localFREE1_MAX_DES);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FREE2_MIN_DES"));
                            
                            
                                    if (localFREE2_MIN_DES==null){
                                         throw new org.apache.axis2.databinding.ADBException("FREE2_MIN_DES cannot be null!!");
                                    }
                                    elementList.add(localFREE2_MIN_DES);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FREE2_MAX_DES"));
                            
                            
                                    if (localFREE2_MAX_DES==null){
                                         throw new org.apache.axis2.databinding.ADBException("FREE2_MAX_DES cannot be null!!");
                                    }
                                    elementList.add(localFREE2_MAX_DES);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FREE3_MIN_DES"));
                            
                            
                                    if (localFREE3_MIN_DES==null){
                                         throw new org.apache.axis2.databinding.ADBException("FREE3_MIN_DES cannot be null!!");
                                    }
                                    elementList.add(localFREE3_MIN_DES);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FREE3_MAX_DES"));
                            
                            
                                    if (localFREE3_MAX_DES==null){
                                         throw new org.apache.axis2.databinding.ADBException("FREE3_MAX_DES cannot be null!!");
                                    }
                                    elementList.add(localFREE3_MAX_DES);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_TEMP"));
                            
                            
                                    if (localJ_TEMP==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_TEMP cannot be null!!");
                                    }
                                    elementList.add(localJ_TEMP);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_AVG"));
                            
                            
                                    if (localJ_AVG==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_AVG cannot be null!!");
                                    }
                                    elementList.add(localJ_AVG);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_MIN"));
                            
                            
                                    if (localJ_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_MIN cannot be null!!");
                                    }
                                    elementList.add(localJ_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_TEMP2"));
                            
                            
                                    if (localJ_TEMP2==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_TEMP2 cannot be null!!");
                                    }
                                    elementList.add(localJ_TEMP2);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_AVG2"));
                            
                            
                                    if (localJ_AVG2==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_AVG2 cannot be null!!");
                                    }
                                    elementList.add(localJ_AVG2);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_MIN2"));
                            
                            
                                    if (localJ_MIN2==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_MIN2 cannot be null!!");
                                    }
                                    elementList.add(localJ_MIN2);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_TEMP3"));
                            
                            
                                    if (localJ_TEMP3==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_TEMP3 cannot be null!!");
                                    }
                                    elementList.add(localJ_TEMP3);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_AVG3"));
                            
                            
                                    if (localJ_AVG3==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_AVG3 cannot be null!!");
                                    }
                                    elementList.add(localJ_AVG3);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_MIN3"));
                            
                            
                                    if (localJ_MIN3==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_MIN3 cannot be null!!");
                                    }
                                    elementList.add(localJ_MIN3);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_TEMP4"));
                            
                            
                                    if (localJ_TEMP4==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_TEMP4 cannot be null!!");
                                    }
                                    elementList.add(localJ_TEMP4);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_AVG4"));
                            
                            
                                    if (localJ_AVG4==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_AVG4 cannot be null!!");
                                    }
                                    elementList.add(localJ_AVG4);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_MIN4"));
                            
                            
                                    if (localJ_MIN4==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_MIN4 cannot be null!!");
                                    }
                                    elementList.add(localJ_MIN4);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_TEMP5"));
                            
                            
                                    if (localJ_TEMP5==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_TEMP5 cannot be null!!");
                                    }
                                    elementList.add(localJ_TEMP5);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_AVG5"));
                            
                            
                                    if (localJ_AVG5==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_AVG5 cannot be null!!");
                                    }
                                    elementList.add(localJ_AVG5);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_MIN5"));
                            
                            
                                    if (localJ_MIN5==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_MIN5 cannot be null!!");
                                    }
                                    elementList.add(localJ_MIN5);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_TEMP6"));
                            
                            
                                    if (localJ_TEMP6==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_TEMP6 cannot be null!!");
                                    }
                                    elementList.add(localJ_TEMP6);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_AVG6"));
                            
                            
                                    if (localJ_AVG6==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_AVG6 cannot be null!!");
                                    }
                                    elementList.add(localJ_AVG6);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "J_MIN6"));
                            
                            
                                    if (localJ_MIN6==null){
                                         throw new org.apache.axis2.databinding.ADBException("J_MIN6 cannot be null!!");
                                    }
                                    elementList.add(localJ_MIN6);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZIDUAN_STR"));
                            
                            
                                    if (localZIDUAN_STR==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZIDUAN_STR cannot be null!!");
                                    }
                                    elementList.add(localZIDUAN_STR);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "YS2_MIN"));
                            
                            
                                    if (localYS2_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("YS2_MIN cannot be null!!");
                                    }
                                    elementList.add(localYS2_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "YS2_MAX"));
                            
                            
                                    if (localYS2_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("YS2_MAX cannot be null!!");
                                    }
                                    elementList.add(localYS2_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "PT"));
                            
                            
                                    if (localPT==null){
                                         throw new org.apache.axis2.databinding.ADBException("PT cannot be null!!");
                                    }
                                    elementList.add(localPT);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CE_MAX"));
                            
                            
                                    if (localCE_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("CE_MAX cannot be null!!");
                                    }
                                    elementList.add(localCE_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "PREN_MIN"));
                            
                            
                                    if (localPREN_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("PREN_MIN cannot be null!!");
                                    }
                                    elementList.add(localPREN_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "PREN_B"));
                            
                            
                                    if (localPREN_B==null){
                                         throw new org.apache.axis2.databinding.ADBException("PREN_B cannot be null!!");
                                    }
                                    elementList.add(localPREN_B);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZFE_MIN"));
                            
                            
                                    if (localZFE_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZFE_MIN cannot be null!!");
                                    }
                                    elementList.add(localZFE_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZFE_MAX"));
                            
                            
                                    if (localZFE_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZFE_MAX cannot be null!!");
                                    }
                                    elementList.add(localZFE_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZCA_MIN"));
                            
                            
                                    if (localZCA_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZCA_MIN cannot be null!!");
                                    }
                                    elementList.add(localZCA_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZCA_MAX"));
                            
                            
                                    if (localZCA_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZCA_MAX cannot be null!!");
                                    }
                                    elementList.add(localZCA_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "H_MIN"));
                            
                            
                                    if (localH_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("H_MIN cannot be null!!");
                                    }
                                    elementList.add(localH_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "H_MAX"));
                            
                            
                                    if (localH_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("H_MAX cannot be null!!");
                                    }
                                    elementList.add(localH_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "O_MIN"));
                            
                            
                                    if (localO_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("O_MIN cannot be null!!");
                                    }
                                    elementList.add(localO_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "O_MAX"));
                            
                            
                                    if (localO_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("O_MAX cannot be null!!");
                                    }
                                    elementList.add(localO_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "GTS_MIN"));
                            
                            
                                    if (localGTS_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("GTS_MIN cannot be null!!");
                                    }
                                    elementList.add(localGTS_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "GTS_MAX"));
                            
                            
                                    if (localGTS_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("GTS_MAX cannot be null!!");
                                    }
                                    elementList.add(localGTS_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "GYS_MIN"));
                            
                            
                                    if (localGYS_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("GYS_MIN cannot be null!!");
                                    }
                                    elementList.add(localGYS_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "GYS_MAX"));
                            
                            
                                    if (localGYS_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("GYS_MAX cannot be null!!");
                                    }
                                    elementList.add(localGYS_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "GE_MIN"));
                            
                            
                                    if (localGE_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("GE_MIN cannot be null!!");
                                    }
                                    elementList.add(localGE_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "GE_MAX"));
                            
                            
                                    if (localGE_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("GE_MAX cannot be null!!");
                                    }
                                    elementList.add(localGE_MAX);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "GR_MIN"));
                            
                            
                                    if (localGR_MIN==null){
                                         throw new org.apache.axis2.databinding.ADBException("GR_MIN cannot be null!!");
                                    }
                                    elementList.add(localGR_MIN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "GR_MAX"));
                            
                            
                                    if (localGR_MAX==null){
                                         throw new org.apache.axis2.databinding.ADBException("GR_MAX cannot be null!!");
                                    }
                                    elementList.add(localGR_MAX);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ZZCAIZHI parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ZZCAIZHI object =
                new ZZCAIZHI();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ZZCAIZHI".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ZZCAIZHI)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","MANDT").equals(reader.getName())){
                                
                                                object.setMANDT(Clnt3.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZCZ").equals(reader.getName())){
                                
                                                object.setZCZ(Char25.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","VBELN").equals(reader.getName())){
                                
                                                object.setVBELN(Char10.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","POSNR").equals(reader.getName())){
                                
                                                object.setPOSNR(Numeric6.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","STD").equals(reader.getName())){
                                
                                                object.setSTD(Char1.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","SPECIFICATE").equals(reader.getName())){
                                
                                                object.setSPECIFICATE(Char40.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CE").equals(reader.getName())){
                                
                                                object.setCE(Char2.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","PREN").equals(reader.getName())){
                                
                                                object.setPREN(Char2.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZDEL").equals(reader.getName())){
                                
                                                object.setZDEL(Char1.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CDATE").equals(reader.getName())){
                                
                                                object.setCDATE(Date10.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","MDATE").equals(reader.getName())){
                                
                                                object.setMDATE(Date10.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CUSER").equals(reader.getName())){
                                
                                                object.setCUSER(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","MUSER").equals(reader.getName())){
                                
                                                object.setMUSER(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","C_MIN").equals(reader.getName())){
                                
                                                object.setC_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","C_MAX").equals(reader.getName())){
                                
                                                object.setC_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","SI_MIN").equals(reader.getName())){
                                
                                                object.setSI_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","SI_MAX").equals(reader.getName())){
                                
                                                object.setSI_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","MN_MIN").equals(reader.getName())){
                                
                                                object.setMN_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","MN_MAX").equals(reader.getName())){
                                
                                                object.setMN_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","P_MIN").equals(reader.getName())){
                                
                                                object.setP_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","P_MAX").equals(reader.getName())){
                                
                                                object.setP_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","S_MIN").equals(reader.getName())){
                                
                                                object.setS_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","S_MAX").equals(reader.getName())){
                                
                                                object.setS_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CR_MIN").equals(reader.getName())){
                                
                                                object.setCR_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CR_MAX").equals(reader.getName())){
                                
                                                object.setCR_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","NI_MIN").equals(reader.getName())){
                                
                                                object.setNI_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","NI_MAX").equals(reader.getName())){
                                
                                                object.setNI_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CU_MIN").equals(reader.getName())){
                                
                                                object.setCU_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CU_MAX").equals(reader.getName())){
                                
                                                object.setCU_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZR_MIN").equals(reader.getName())){
                                
                                                object.setZR_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZR_MAX").equals(reader.getName())){
                                
                                                object.setZR_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","SN_MIN").equals(reader.getName())){
                                
                                                object.setSN_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","SN_MAX").equals(reader.getName())){
                                
                                                object.setSN_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","PB_MIN").equals(reader.getName())){
                                
                                                object.setPB_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","PB_MAX").equals(reader.getName())){
                                
                                                object.setPB_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","SB_MIN").equals(reader.getName())){
                                
                                                object.setSB_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","SB_MAX").equals(reader.getName())){
                                
                                                object.setSB_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","AS_MIN").equals(reader.getName())){
                                
                                                object.setAS_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","AS_MAX").equals(reader.getName())){
                                
                                                object.setAS_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CO_MIN").equals(reader.getName())){
                                
                                                object.setCO_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CO_MAX").equals(reader.getName())){
                                
                                                object.setCO_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TA_MIN").equals(reader.getName())){
                                
                                                object.setTA_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TA_MAX").equals(reader.getName())){
                                
                                                object.setTA_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TA1_MIN").equals(reader.getName())){
                                
                                                object.setTA1_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TA1_MAX").equals(reader.getName())){
                                
                                                object.setTA1_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","USER1_MIN").equals(reader.getName())){
                                
                                                object.setUSER1_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","USER1_MAX").equals(reader.getName())){
                                
                                                object.setUSER1_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","USER2_MIN").equals(reader.getName())){
                                
                                                object.setUSER2_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","USER2_MAX").equals(reader.getName())){
                                
                                                object.setUSER2_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","USER3_MIN").equals(reader.getName())){
                                
                                                object.setUSER3_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","USER3_MAX").equals(reader.getName())){
                                
                                                object.setUSER3_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TS_MIN").equals(reader.getName())){
                                
                                                object.setTS_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TS_MAX").equals(reader.getName())){
                                
                                                object.setTS_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","YS_MIN").equals(reader.getName())){
                                
                                                object.setYS_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","YS_MAX").equals(reader.getName())){
                                
                                                object.setYS_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","E_MIN").equals(reader.getName())){
                                
                                                object.setE_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","E_MAX").equals(reader.getName())){
                                
                                                object.setE_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","R_MIN").equals(reader.getName())){
                                
                                                object.setR_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","R_MAX").equals(reader.getName())){
                                
                                                object.setR_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HB_MIN").equals(reader.getName())){
                                
                                                object.setHB_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HB_MAX").equals(reader.getName())){
                                
                                                object.setHB_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","B_MAX").equals(reader.getName())){
                                
                                                object.setB_MAX(Quantum184.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","B_MIN").equals(reader.getName())){
                                
                                                object.setB_MIN(Quantum184.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HEAT1").equals(reader.getName())){
                                
                                                object.setHEAT1(Char40.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HDSC1").equals(reader.getName())){
                                
                                                object.setHDSC1(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TEMP1").equals(reader.getName())){
                                
                                                object.setTEMP1(Char15.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TDSC1").equals(reader.getName())){
                                
                                                object.setTDSC1(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HOLD1").equals(reader.getName())){
                                
                                                object.setHOLD1(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HODSC1").equals(reader.getName())){
                                
                                                object.setHODSC1(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","COOL1").equals(reader.getName())){
                                
                                                object.setCOOL1(Char21.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CDSC1").equals(reader.getName())){
                                
                                                object.setCDSC1(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FURN1").equals(reader.getName())){
                                
                                                object.setFURN1(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FDSC1").equals(reader.getName())){
                                
                                                object.setFDSC1(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HEAT2").equals(reader.getName())){
                                
                                                object.setHEAT2(Char40.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HDSC2").equals(reader.getName())){
                                
                                                object.setHDSC2(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TEMP2").equals(reader.getName())){
                                
                                                object.setTEMP2(Char15.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TDSC2").equals(reader.getName())){
                                
                                                object.setTDSC2(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HOLD2").equals(reader.getName())){
                                
                                                object.setHOLD2(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HODSC2").equals(reader.getName())){
                                
                                                object.setHODSC2(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","COOL2").equals(reader.getName())){
                                
                                                object.setCOOL2(Char21.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CDSC2").equals(reader.getName())){
                                
                                                object.setCDSC2(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FURN2").equals(reader.getName())){
                                
                                                object.setFURN2(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FDSC2").equals(reader.getName())){
                                
                                                object.setFDSC2(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HEAT3").equals(reader.getName())){
                                
                                                object.setHEAT3(Char40.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HDSC3").equals(reader.getName())){
                                
                                                object.setHDSC3(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TEMP3").equals(reader.getName())){
                                
                                                object.setTEMP3(Char15.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TDSC3").equals(reader.getName())){
                                
                                                object.setTDSC3(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HOLD3").equals(reader.getName())){
                                
                                                object.setHOLD3(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HODSC3").equals(reader.getName())){
                                
                                                object.setHODSC3(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","COOL3").equals(reader.getName())){
                                
                                                object.setCOOL3(Char21.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CDSC3").equals(reader.getName())){
                                
                                                object.setCDSC3(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FURN3").equals(reader.getName())){
                                
                                                object.setFURN3(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FDSC3").equals(reader.getName())){
                                
                                                object.setFDSC3(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HEAT4").equals(reader.getName())){
                                
                                                object.setHEAT4(Char40.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HDSC4").equals(reader.getName())){
                                
                                                object.setHDSC4(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TEMP4").equals(reader.getName())){
                                
                                                object.setTEMP4(Char15.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HOLD4").equals(reader.getName())){
                                
                                                object.setHOLD4(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","HODSC4").equals(reader.getName())){
                                
                                                object.setHODSC4(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","COOL4").equals(reader.getName())){
                                
                                                object.setCOOL4(Char21.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CDSC4").equals(reader.getName())){
                                
                                                object.setCDSC4(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FE_MAX").equals(reader.getName())){
                                
                                                object.setFE_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FE_MIN").equals(reader.getName())){
                                
                                                object.setFE_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","MO_MIN").equals(reader.getName())){
                                
                                                object.setMO_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","MO_MAX").equals(reader.getName())){
                                
                                                object.setMO_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","V_MIN").equals(reader.getName())){
                                
                                                object.setV_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","V_MAX").equals(reader.getName())){
                                
                                                object.setV_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","AL_MIN").equals(reader.getName())){
                                
                                                object.setAL_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","AL_MAX").equals(reader.getName())){
                                
                                                object.setAL_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","NB_MIN").equals(reader.getName())){
                                
                                                object.setNB_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","NB_MAX").equals(reader.getName())){
                                
                                                object.setNB_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","W_MIN").equals(reader.getName())){
                                
                                                object.setW_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","W_MAX").equals(reader.getName())){
                                
                                                object.setW_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZN_MIN").equals(reader.getName())){
                                
                                                object.setZN_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZN_MAX").equals(reader.getName())){
                                
                                                object.setZN_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TI_MIN").equals(reader.getName())){
                                
                                                object.setTI_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","TI_MAX").equals(reader.getName())){
                                
                                                object.setTI_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","N_MIN").equals(reader.getName())){
                                
                                                object.setN_MIN(Quantum184.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","N_MAX").equals(reader.getName())){
                                
                                                object.setN_MAX(Quantum184.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FREE1_MIN").equals(reader.getName())){
                                
                                                object.setFREE1_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FREE1_MAX").equals(reader.getName())){
                                
                                                object.setFREE1_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FREE2_MIN").equals(reader.getName())){
                                
                                                object.setFREE2_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FREE2_MAX").equals(reader.getName())){
                                
                                                object.setFREE2_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FREE3_MIN").equals(reader.getName())){
                                
                                                object.setFREE3_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FREE3_MAX").equals(reader.getName())){
                                
                                                object.setFREE3_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FREE1_MIN_DES").equals(reader.getName())){
                                
                                                object.setFREE1_MIN_DES(Char25.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FREE1_MAX_DES").equals(reader.getName())){
                                
                                                object.setFREE1_MAX_DES(Char25.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FREE2_MIN_DES").equals(reader.getName())){
                                
                                                object.setFREE2_MIN_DES(Char25.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FREE2_MAX_DES").equals(reader.getName())){
                                
                                                object.setFREE2_MAX_DES(Char25.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FREE3_MIN_DES").equals(reader.getName())){
                                
                                                object.setFREE3_MIN_DES(Char25.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FREE3_MAX_DES").equals(reader.getName())){
                                
                                                object.setFREE3_MAX_DES(Char25.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_TEMP").equals(reader.getName())){
                                
                                                object.setJ_TEMP(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_AVG").equals(reader.getName())){
                                
                                                object.setJ_AVG(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_MIN").equals(reader.getName())){
                                
                                                object.setJ_MIN(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_TEMP2").equals(reader.getName())){
                                
                                                object.setJ_TEMP2(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_AVG2").equals(reader.getName())){
                                
                                                object.setJ_AVG2(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_MIN2").equals(reader.getName())){
                                
                                                object.setJ_MIN2(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_TEMP3").equals(reader.getName())){
                                
                                                object.setJ_TEMP3(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_AVG3").equals(reader.getName())){
                                
                                                object.setJ_AVG3(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_MIN3").equals(reader.getName())){
                                
                                                object.setJ_MIN3(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_TEMP4").equals(reader.getName())){
                                
                                                object.setJ_TEMP4(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_AVG4").equals(reader.getName())){
                                
                                                object.setJ_AVG4(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_MIN4").equals(reader.getName())){
                                
                                                object.setJ_MIN4(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_TEMP5").equals(reader.getName())){
                                
                                                object.setJ_TEMP5(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_AVG5").equals(reader.getName())){
                                
                                                object.setJ_AVG5(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_MIN5").equals(reader.getName())){
                                
                                                object.setJ_MIN5(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_TEMP6").equals(reader.getName())){
                                
                                                object.setJ_TEMP6(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_AVG6").equals(reader.getName())){
                                
                                                object.setJ_AVG6(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","J_MIN6").equals(reader.getName())){
                                
                                                object.setJ_MIN6(Char8.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZIDUAN_STR").equals(reader.getName())){
                                
                                                object.setZIDUAN_STR(Char20.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","YS2_MIN").equals(reader.getName())){
                                
                                                object.setYS2_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","YS2_MAX").equals(reader.getName())){
                                
                                                object.setYS2_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","PT").equals(reader.getName())){
                                
                                                object.setPT(Char2.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CE_MAX").equals(reader.getName())){
                                
                                                object.setCE_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","PREN_MIN").equals(reader.getName())){
                                
                                                object.setPREN_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","PREN_B").equals(reader.getName())){
                                
                                                object.setPREN_B(Char1.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZFE_MIN").equals(reader.getName())){
                                
                                                object.setZFE_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZFE_MAX").equals(reader.getName())){
                                
                                                object.setZFE_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZCA_MIN").equals(reader.getName())){
                                
                                                object.setZCA_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZCA_MAX").equals(reader.getName())){
                                
                                                object.setZCA_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","H_MIN").equals(reader.getName())){
                                
                                                object.setH_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","H_MAX").equals(reader.getName())){
                                
                                                object.setH_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","O_MIN").equals(reader.getName())){
                                
                                                object.setO_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","O_MAX").equals(reader.getName())){
                                
                                                object.setO_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","GTS_MIN").equals(reader.getName())){
                                
                                                object.setGTS_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","GTS_MAX").equals(reader.getName())){
                                
                                                object.setGTS_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","GYS_MIN").equals(reader.getName())){
                                
                                                object.setGYS_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","GYS_MAX").equals(reader.getName())){
                                
                                                object.setGYS_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","GE_MIN").equals(reader.getName())){
                                
                                                object.setGE_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","GE_MAX").equals(reader.getName())){
                                
                                                object.setGE_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","GR_MIN").equals(reader.getName())){
                                
                                                object.setGR_MIN(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","GR_MAX").equals(reader.getName())){
                                
                                                object.setGR_MAX(Quantum183.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class TABLE_OF_ZMTR_CODE
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TABLE_OF_ZMTR_CODE
                Namespace URI = urn:sap-com:document:sap:rfc:functions
                Namespace Prefix = ns1
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Item
                        * This was an Array!
                        */

                        
                                    protected ZMTR_CODE[] localItem ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localItemTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return ZMTR_CODE[]
                           */
                           public  ZMTR_CODE[] getItem(){
                               return localItem;
                           }

                           
                        


                               
                              /**
                               * validate the array for Item
                               */
                              protected void validateItem(ZMTR_CODE[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param Item
                              */
                              public void setItem(ZMTR_CODE[] param){
                              
                                   validateItem(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localItemTracker = true;
                                          } else {
                                             localItemTracker = false;
                                                 
                                          }
                                      
                                      this.localItem=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param ZMTR_CODE
                             */
                             public void addItem(ZMTR_CODE param){
                                   if (localItem == null){
                                   localItem = new ZMTR_CODE[]{};
                                   }

                            
                                 //update the setting tracker
                                localItemTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localItem);
                               list.add(param);
                               this.localItem =
                             (ZMTR_CODE[])list.toArray(
                            new ZMTR_CODE[list.size()]);

                             }
                             

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       TABLE_OF_ZMTR_CODE.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":TABLE_OF_ZMTR_CODE",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "TABLE_OF_ZMTR_CODE",
                           xmlWriter);
                   }

               
                   }
                if (localItemTracker){
                                       if (localItem!=null){
                                            for (int i = 0;i < localItem.length;i++){
                                                if (localItem[i] != null){
                                                 localItem[i].serialize(new javax.xml.namespace.QName("","item"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                        // we don't have to do any thing since minOccures is zero
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");
                                        
                                    }
                                 }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localItemTracker){
                             if (localItem!=null) {
                                 for (int i = 0;i < localItem.length;i++){

                                    if (localItem[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("",
                                                                          "item"));
                                         elementList.add(localItem[i]);
                                    } else {
                                        
                                                // nothing to do
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static TABLE_OF_ZMTR_CODE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            TABLE_OF_ZMTR_CODE object =
                new TABLE_OF_ZMTR_CODE();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"TABLE_OF_ZMTR_CODE".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TABLE_OF_ZMTR_CODE)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","item").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(ZMTR_CODE.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("","item").equals(reader.getName())){
                                                                    list1.add(ZMTR_CODE.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setItem((ZMTR_CODE[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                ZMTR_CODE.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ZWEBS_ZCAIZHI
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "ZWEBS_ZCAIZHI",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ZCZ
                        */

                        
                                    protected Char25 localZCZ ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char25
                           */
                           public  Char25 getZCZ(){
                               return localZCZ;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZCZ
                               */
                               public void setZCZ(Char25 param){
                            
                                            this.localZCZ=param;
                                    

                               }
                            

                        /**
                        * field for ZMTR_CODE
                        */

                        
                                    protected TABLE_OF_ZMTR_CODE localZMTR_CODE ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localZMTR_CODETracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return TABLE_OF_ZMTR_CODE
                           */
                           public  TABLE_OF_ZMTR_CODE getZMTR_CODE(){
                               return localZMTR_CODE;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZMTR_CODE
                               */
                               public void setZMTR_CODE(TABLE_OF_ZMTR_CODE param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localZMTR_CODETracker = true;
                                       } else {
                                          localZMTR_CODETracker = false;
                                              
                                       }
                                   
                                            this.localZMTR_CODE=param;
                                    

                               }
                            

                        /**
                        * field for ZMTR_ZCAIZHI
                        */

                        
                                    protected TABLE_OF_ZZCAIZHI localZMTR_ZCAIZHI ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localZMTR_ZCAIZHITracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return TABLE_OF_ZZCAIZHI
                           */
                           public  TABLE_OF_ZZCAIZHI getZMTR_ZCAIZHI(){
                               return localZMTR_ZCAIZHI;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZMTR_ZCAIZHI
                               */
                               public void setZMTR_ZCAIZHI(TABLE_OF_ZZCAIZHI param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localZMTR_ZCAIZHITracker = true;
                                       } else {
                                          localZMTR_ZCAIZHITracker = false;
                                              
                                       }
                                   
                                            this.localZMTR_ZCAIZHI=param;
                                    

                               }
                            

                        /**
                        * field for ZSTD
                        */

                        
                                    protected Char1 localZSTD ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char1
                           */
                           public  Char1 getZSTD(){
                               return localZSTD;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZSTD
                               */
                               public void setZSTD(Char1 param){
                            
                                            this.localZSTD=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ZWEBS_ZCAIZHI.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ZWEBS_ZCAIZHI",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ZWEBS_ZCAIZHI",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localZCZ==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZCZ cannot be null!!");
                                            }
                                           localZCZ.serialize(new javax.xml.namespace.QName("","ZCZ"),
                                               factory,xmlWriter);
                                         if (localZMTR_CODETracker){
                                            if (localZMTR_CODE==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZMTR_CODE cannot be null!!");
                                            }
                                           localZMTR_CODE.serialize(new javax.xml.namespace.QName("","ZMTR_CODE"),
                                               factory,xmlWriter);
                                        } if (localZMTR_ZCAIZHITracker){
                                            if (localZMTR_ZCAIZHI==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZMTR_ZCAIZHI cannot be null!!");
                                            }
                                           localZMTR_ZCAIZHI.serialize(new javax.xml.namespace.QName("","ZMTR_ZCAIZHI"),
                                               factory,xmlWriter);
                                        }
                                            if (localZSTD==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZSTD cannot be null!!");
                                            }
                                           localZSTD.serialize(new javax.xml.namespace.QName("","ZSTD"),
                                               factory,xmlWriter);
                                        
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZCZ"));
                            
                            
                                    if (localZCZ==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZCZ cannot be null!!");
                                    }
                                    elementList.add(localZCZ);
                                 if (localZMTR_CODETracker){
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZMTR_CODE"));
                            
                            
                                    if (localZMTR_CODE==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZMTR_CODE cannot be null!!");
                                    }
                                    elementList.add(localZMTR_CODE);
                                } if (localZMTR_ZCAIZHITracker){
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZMTR_ZCAIZHI"));
                            
                            
                                    if (localZMTR_ZCAIZHI==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZMTR_ZCAIZHI cannot be null!!");
                                    }
                                    elementList.add(localZMTR_ZCAIZHI);
                                }
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZSTD"));
                            
                            
                                    if (localZSTD==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZSTD cannot be null!!");
                                    }
                                    elementList.add(localZSTD);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ZWEBS_ZCAIZHI parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ZWEBS_ZCAIZHI object =
                new ZWEBS_ZCAIZHI();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ZWEBS_ZCAIZHI".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ZWEBS_ZCAIZHI)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZCZ").equals(reader.getName())){
                                
                                                object.setZCZ(Char25.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZMTR_CODE").equals(reader.getName())){
                                
                                                object.setZMTR_CODE(TABLE_OF_ZMTR_CODE.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZMTR_ZCAIZHI").equals(reader.getName())){
                                
                                                object.setZMTR_ZCAIZHI(TABLE_OF_ZZCAIZHI.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZSTD").equals(reader.getName())){
                                
                                                object.setZSTD(Char1.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ExtensionMapper{

          public static java.lang.Object getTypeObject(java.lang.String namespaceURI,
                                                       java.lang.String typeName,
                                                       javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "quantum18.4".equals(typeName)){
                   
                            return  Quantum184.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "char25".equals(typeName)){
                   
                            return  Char25.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "char40".equals(typeName)){
                   
                            return  Char40.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "char50".equals(typeName)){
                   
                            return  Char50.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "char20".equals(typeName)){
                   
                            return  Char20.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "char21".equals(typeName)){
                   
                            return  Char21.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "quantum18.3".equals(typeName)){
                   
                            return  Quantum183.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "clnt3".equals(typeName)){
                   
                            return  Clnt3.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "TABLE_OF_ZZCAIZHI".equals(typeName)){
                   
                            return  TABLE_OF_ZZCAIZHI.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "date10".equals(typeName)){
                   
                            return  Date10.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "char8".equals(typeName)){
                   
                            return  Char8.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "ZZCAIZHI".equals(typeName)){
                   
                            return  ZZCAIZHI.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "TABLE_OF_ZMTR_CODE".equals(typeName)){
                   
                            return  TABLE_OF_ZMTR_CODE.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "numeric4".equals(typeName)){
                   
                            return  Numeric4.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "char2".equals(typeName)){
                   
                            return  Char2.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "char17".equals(typeName)){
                   
                            return  Char17.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "char15".equals(typeName)){
                   
                            return  Char15.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "char1".equals(typeName)){
                   
                            return  Char1.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "char10".equals(typeName)){
                   
                            return  Char10.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "numeric6".equals(typeName)){
                   
                            return  Numeric6.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:sap-com:document:sap:rfc:functions".equals(namespaceURI) &&
                  "ZMTR_CODE".equals(typeName)){
                   
                            return  ZMTR_CODE.Factory.parse(reader);
                        

                  }

              
             throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
          }

        }
    
        public static class Numeric6
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "numeric6",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Numeric6
                        */

                        
                                    protected java.lang.String localNumeric6 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNumeric6(){
                               return localNumeric6;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Numeric6
                               */
                               public void setNumeric6(java.lang.String param){
                            
                                            if (org.apache.axis2.databinding.utils.ConverterUtil.convertToString(param).matches("\\d*")) {
                                                this.localNumeric6=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localNumeric6.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Numeric6.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":numeric6",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "numeric6",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localNumeric6==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localNumeric6);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumeric6)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Numeric6 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Numeric6 returnValue = new  Numeric6();
                    
                            returnValue.setNumeric6(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Numeric6 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Numeric6.Factory.fromString(content,namespaceUri);
                    } else {
                       return Numeric6.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Numeric6 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Numeric6 object =
                new Numeric6();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumeric6(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Char8
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "char8",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Char8
                        */

                        
                                    protected java.lang.String localChar8 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChar8(){
                               return localChar8;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Char8
                               */
                               public void setChar8(java.lang.String param){
                            
                                            if (  (java.lang.String.valueOf(param).length() <= 8)  ) {
                                                this.localChar8=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localChar8.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Char8.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":char8",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "char8",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localChar8==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localChar8);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChar8)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Char8 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Char8 returnValue = new  Char8();
                    
                            returnValue.setChar8(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Char8 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Char8.Factory.fromString(content,namespaceUri);
                    } else {
                       return Char8.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Char8 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Char8 object =
                new Char8();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChar8(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Numeric4
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "numeric4",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Numeric4
                        */

                        
                                    protected java.lang.String localNumeric4 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNumeric4(){
                               return localNumeric4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Numeric4
                               */
                               public void setNumeric4(java.lang.String param){
                            
                                            if (org.apache.axis2.databinding.utils.ConverterUtil.convertToString(param).matches("\\d*")) {
                                                this.localNumeric4=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localNumeric4.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Numeric4.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":numeric4",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "numeric4",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localNumeric4==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localNumeric4);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumeric4)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Numeric4 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Numeric4 returnValue = new  Numeric4();
                    
                            returnValue.setNumeric4(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Numeric4 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Numeric4.Factory.fromString(content,namespaceUri);
                    } else {
                       return Numeric4.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Numeric4 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Numeric4 object =
                new Numeric4();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumeric4(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Quantum183
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "quantum18.3",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Quantum183
                        */

                        
                                    protected java.math.BigDecimal localQuantum183 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigDecimal
                           */
                           public  java.math.BigDecimal getQuantum183(){
                               return localQuantum183;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Quantum183
                               */
                               public void setQuantum183(java.math.BigDecimal param){
                            
                                             this.localQuantum183=param;
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localQuantum183.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Quantum183.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":quantum18.3",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "quantum18.3",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localQuantum183==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQuantum183));
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQuantum183)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Quantum183 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Quantum183 returnValue = new  Quantum183();
                    
                            returnValue.setQuantum183(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(value));
                        

                    return returnValue;
                }

                public static Quantum183 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Quantum183.Factory.fromString(content,namespaceUri);
                    } else {
                       return Quantum183.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Quantum183 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Quantum183 object =
                new Quantum183();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setQuantum183(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Quantum184
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "quantum18.4",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Quantum184
                        */

                        
                                    protected java.math.BigDecimal localQuantum184 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigDecimal
                           */
                           public  java.math.BigDecimal getQuantum184(){
                               return localQuantum184;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Quantum184
                               */
                               public void setQuantum184(java.math.BigDecimal param){
                            
                                             this.localQuantum184=param;
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localQuantum184.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Quantum184.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":quantum18.4",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "quantum18.4",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localQuantum184==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQuantum184));
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQuantum184)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Quantum184 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Quantum184 returnValue = new  Quantum184();
                    
                            returnValue.setQuantum184(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(value));
                        

                    return returnValue;
                }

                public static Quantum184 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Quantum184.Factory.fromString(content,namespaceUri);
                    } else {
                       return Quantum184.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Quantum184 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Quantum184 object =
                new Quantum184();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setQuantum184(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Date10
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:sap-com:document:sap:rfc:functions",
                "date10",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Date10
                        */

                        
                                    protected java.lang.String localDate10 ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDate10(){
                               return localDate10;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date10
                               */
                               public void setDate10(java.lang.String param){
                            
                                            if (org.apache.axis2.databinding.utils.ConverterUtil.convertToString(param).matches("\\d\\d\\d\\d-\\d\\d-\\d\\d")) {
                                                this.localDate10=param;
                                            }
                                            else {
                                                throw new java.lang.RuntimeException();
                                            }
                                        

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localDate10.toString();
                                    
                            }
                        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Date10.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String localName = parentQName.getLocalPart();
                        
                            if (! namespace.equals("")) {
                                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);

                                    xmlWriter.writeStartElement(prefix, localName, namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);

                                } else {
                                    xmlWriter.writeStartElement(namespace, localName);
                                }

                            } else {
                                xmlWriter.writeStartElement(localName);
                            }

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":date10",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "date10",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localDate10==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localDate10);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();

                    

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate10)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Date10 fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    Date10 returnValue = new  Date10();
                    
                            returnValue.setDate10(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static Date10 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Date10.Factory.fromString(content,namespaceUri);
                    } else {
                       return Date10.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Date10 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Date10 object =
                new Date10();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate10(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ZMTR_CODE
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ZMTR_CODE
                Namespace URI = urn:sap-com:document:sap:rfc:functions
                Namespace Prefix = ns1
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:sap-com:document:sap:rfc:functions")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for MANDT
                        */

                        
                                    protected Clnt3 localMANDT ;
                                

                           /**
                           * Auto generated getter method
                           * @return Clnt3
                           */
                           public  Clnt3 getMANDT(){
                               return localMANDT;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MANDT
                               */
                               public void setMANDT(Clnt3 param){
                            
                                            this.localMANDT=param;
                                    

                               }
                            

                        /**
                        * field for ZCZ
                        */

                        
                                    protected Char25 localZCZ ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char25
                           */
                           public  Char25 getZCZ(){
                               return localZCZ;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZCZ
                               */
                               public void setZCZ(Char25 param){
                            
                                            this.localZCZ=param;
                                    

                               }
                            

                        /**
                        * field for VBELN
                        */

                        
                                    protected Char10 localVBELN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char10
                           */
                           public  Char10 getVBELN(){
                               return localVBELN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param VBELN
                               */
                               public void setVBELN(Char10 param){
                            
                                            this.localVBELN=param;
                                    

                               }
                            

                        /**
                        * field for POSNR
                        */

                        
                                    protected Numeric6 localPOSNR ;
                                

                           /**
                           * Auto generated getter method
                           * @return Numeric6
                           */
                           public  Numeric6 getPOSNR(){
                               return localPOSNR;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param POSNR
                               */
                               public void setPOSNR(Numeric6 param){
                            
                                            this.localPOSNR=param;
                                    

                               }
                            

                        /**
                        * field for STD
                        */

                        
                                    protected Char1 localSTD ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char1
                           */
                           public  Char1 getSTD(){
                               return localSTD;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param STD
                               */
                               public void setSTD(Char1 param){
                            
                                            this.localSTD=param;
                                    

                               }
                            

                        /**
                        * field for LCN
                        */

                        
                                    protected Numeric4 localLCN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Numeric4
                           */
                           public  Numeric4 getLCN(){
                               return localLCN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LCN
                               */
                               public void setLCN(Numeric4 param){
                            
                                            this.localLCN=param;
                                    

                               }
                            

                        /**
                        * field for CODE
                        */

                        
                                    protected Char10 localCODE ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char10
                           */
                           public  Char10 getCODE(){
                               return localCODE;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CODE
                               */
                               public void setCODE(Char10 param){
                            
                                            this.localCODE=param;
                                    

                               }
                            

                        /**
                        * field for MTR_CODE
                        */

                        
                                    protected Char10 localMTR_CODE ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char10
                           */
                           public  Char10 getMTR_CODE(){
                               return localMTR_CODE;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MTR_CODE
                               */
                               public void setMTR_CODE(Char10 param){
                            
                                            this.localMTR_CODE=param;
                                    

                               }
                            

                        /**
                        * field for MTR_NAME
                        */

                        
                                    protected Char50 localMTR_NAME ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char50
                           */
                           public  Char50 getMTR_NAME(){
                               return localMTR_NAME;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MTR_NAME
                               */
                               public void setMTR_NAME(Char50 param){
                            
                                            this.localMTR_NAME=param;
                                    

                               }
                            

                        /**
                        * field for FORMULA
                        */

                        
                                    protected Char50 localFORMULA ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char50
                           */
                           public  Char50 getFORMULA(){
                               return localFORMULA;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FORMULA
                               */
                               public void setFORMULA(Char50 param){
                            
                                            this.localFORMULA=param;
                                    

                               }
                            

                        /**
                        * field for LOWER_SIGN
                        */

                        
                                    protected Char2 localLOWER_SIGN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char2
                           */
                           public  Char2 getLOWER_SIGN(){
                               return localLOWER_SIGN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LOWER_SIGN
                               */
                               public void setLOWER_SIGN(Char2 param){
                            
                                            this.localLOWER_SIGN=param;
                                    

                               }
                            

                        /**
                        * field for LOWER_VALUE
                        */

                        
                                    protected Char17 localLOWER_VALUE ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char17
                           */
                           public  Char17 getLOWER_VALUE(){
                               return localLOWER_VALUE;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LOWER_VALUE
                               */
                               public void setLOWER_VALUE(Char17 param){
                            
                                            this.localLOWER_VALUE=param;
                                    

                               }
                            

                        /**
                        * field for UPPER_SIGN
                        */

                        
                                    protected Char2 localUPPER_SIGN ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char2
                           */
                           public  Char2 getUPPER_SIGN(){
                               return localUPPER_SIGN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UPPER_SIGN
                               */
                               public void setUPPER_SIGN(Char2 param){
                            
                                            this.localUPPER_SIGN=param;
                                    

                               }
                            

                        /**
                        * field for UPPER_VALUE
                        */

                        
                                    protected Char17 localUPPER_VALUE ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char17
                           */
                           public  Char17 getUPPER_VALUE(){
                               return localUPPER_VALUE;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UPPER_VALUE
                               */
                               public void setUPPER_VALUE(Char17 param){
                            
                                            this.localUPPER_VALUE=param;
                                    

                               }
                            

                        /**
                        * field for CAL_FLAG
                        */

                        
                                    protected Char1 localCAL_FLAG ;
                                

                           /**
                           * Auto generated getter method
                           * @return Char1
                           */
                           public  Char1 getCAL_FLAG(){
                               return localCAL_FLAG;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CAL_FLAG
                               */
                               public void setCAL_FLAG(Char1 param){
                            
                                            this.localCAL_FLAG=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ZMTR_CODE.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:sap-com:document:sap:rfc:functions");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ZMTR_CODE",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ZMTR_CODE",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localMANDT==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MANDT cannot be null!!");
                                            }
                                           localMANDT.serialize(new javax.xml.namespace.QName("","MANDT"),
                                               factory,xmlWriter);
                                        
                                            if (localZCZ==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ZCZ cannot be null!!");
                                            }
                                           localZCZ.serialize(new javax.xml.namespace.QName("","ZCZ"),
                                               factory,xmlWriter);
                                        
                                            if (localVBELN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("VBELN cannot be null!!");
                                            }
                                           localVBELN.serialize(new javax.xml.namespace.QName("","VBELN"),
                                               factory,xmlWriter);
                                        
                                            if (localPOSNR==null){
                                                 throw new org.apache.axis2.databinding.ADBException("POSNR cannot be null!!");
                                            }
                                           localPOSNR.serialize(new javax.xml.namespace.QName("","POSNR"),
                                               factory,xmlWriter);
                                        
                                            if (localSTD==null){
                                                 throw new org.apache.axis2.databinding.ADBException("STD cannot be null!!");
                                            }
                                           localSTD.serialize(new javax.xml.namespace.QName("","STD"),
                                               factory,xmlWriter);
                                        
                                            if (localLCN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("LCN cannot be null!!");
                                            }
                                           localLCN.serialize(new javax.xml.namespace.QName("","LCN"),
                                               factory,xmlWriter);
                                        
                                            if (localCODE==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CODE cannot be null!!");
                                            }
                                           localCODE.serialize(new javax.xml.namespace.QName("","CODE"),
                                               factory,xmlWriter);
                                        
                                            if (localMTR_CODE==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MTR_CODE cannot be null!!");
                                            }
                                           localMTR_CODE.serialize(new javax.xml.namespace.QName("","MTR_CODE"),
                                               factory,xmlWriter);
                                        
                                            if (localMTR_NAME==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MTR_NAME cannot be null!!");
                                            }
                                           localMTR_NAME.serialize(new javax.xml.namespace.QName("","MTR_NAME"),
                                               factory,xmlWriter);
                                        
                                            if (localFORMULA==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FORMULA cannot be null!!");
                                            }
                                           localFORMULA.serialize(new javax.xml.namespace.QName("","FORMULA"),
                                               factory,xmlWriter);
                                        
                                            if (localLOWER_SIGN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("LOWER_SIGN cannot be null!!");
                                            }
                                           localLOWER_SIGN.serialize(new javax.xml.namespace.QName("","LOWER_SIGN"),
                                               factory,xmlWriter);
                                        
                                            if (localLOWER_VALUE==null){
                                                 throw new org.apache.axis2.databinding.ADBException("LOWER_VALUE cannot be null!!");
                                            }
                                           localLOWER_VALUE.serialize(new javax.xml.namespace.QName("","LOWER_VALUE"),
                                               factory,xmlWriter);
                                        
                                            if (localUPPER_SIGN==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UPPER_SIGN cannot be null!!");
                                            }
                                           localUPPER_SIGN.serialize(new javax.xml.namespace.QName("","UPPER_SIGN"),
                                               factory,xmlWriter);
                                        
                                            if (localUPPER_VALUE==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UPPER_VALUE cannot be null!!");
                                            }
                                           localUPPER_VALUE.serialize(new javax.xml.namespace.QName("","UPPER_VALUE"),
                                               factory,xmlWriter);
                                        
                                            if (localCAL_FLAG==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CAL_FLAG cannot be null!!");
                                            }
                                           localCAL_FLAG.serialize(new javax.xml.namespace.QName("","CAL_FLAG"),
                                               factory,xmlWriter);
                                        
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "MANDT"));
                            
                            
                                    if (localMANDT==null){
                                         throw new org.apache.axis2.databinding.ADBException("MANDT cannot be null!!");
                                    }
                                    elementList.add(localMANDT);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "ZCZ"));
                            
                            
                                    if (localZCZ==null){
                                         throw new org.apache.axis2.databinding.ADBException("ZCZ cannot be null!!");
                                    }
                                    elementList.add(localZCZ);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "VBELN"));
                            
                            
                                    if (localVBELN==null){
                                         throw new org.apache.axis2.databinding.ADBException("VBELN cannot be null!!");
                                    }
                                    elementList.add(localVBELN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "POSNR"));
                            
                            
                                    if (localPOSNR==null){
                                         throw new org.apache.axis2.databinding.ADBException("POSNR cannot be null!!");
                                    }
                                    elementList.add(localPOSNR);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "STD"));
                            
                            
                                    if (localSTD==null){
                                         throw new org.apache.axis2.databinding.ADBException("STD cannot be null!!");
                                    }
                                    elementList.add(localSTD);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "LCN"));
                            
                            
                                    if (localLCN==null){
                                         throw new org.apache.axis2.databinding.ADBException("LCN cannot be null!!");
                                    }
                                    elementList.add(localLCN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CODE"));
                            
                            
                                    if (localCODE==null){
                                         throw new org.apache.axis2.databinding.ADBException("CODE cannot be null!!");
                                    }
                                    elementList.add(localCODE);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "MTR_CODE"));
                            
                            
                                    if (localMTR_CODE==null){
                                         throw new org.apache.axis2.databinding.ADBException("MTR_CODE cannot be null!!");
                                    }
                                    elementList.add(localMTR_CODE);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "MTR_NAME"));
                            
                            
                                    if (localMTR_NAME==null){
                                         throw new org.apache.axis2.databinding.ADBException("MTR_NAME cannot be null!!");
                                    }
                                    elementList.add(localMTR_NAME);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "FORMULA"));
                            
                            
                                    if (localFORMULA==null){
                                         throw new org.apache.axis2.databinding.ADBException("FORMULA cannot be null!!");
                                    }
                                    elementList.add(localFORMULA);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "LOWER_SIGN"));
                            
                            
                                    if (localLOWER_SIGN==null){
                                         throw new org.apache.axis2.databinding.ADBException("LOWER_SIGN cannot be null!!");
                                    }
                                    elementList.add(localLOWER_SIGN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "LOWER_VALUE"));
                            
                            
                                    if (localLOWER_VALUE==null){
                                         throw new org.apache.axis2.databinding.ADBException("LOWER_VALUE cannot be null!!");
                                    }
                                    elementList.add(localLOWER_VALUE);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "UPPER_SIGN"));
                            
                            
                                    if (localUPPER_SIGN==null){
                                         throw new org.apache.axis2.databinding.ADBException("UPPER_SIGN cannot be null!!");
                                    }
                                    elementList.add(localUPPER_SIGN);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "UPPER_VALUE"));
                            
                            
                                    if (localUPPER_VALUE==null){
                                         throw new org.apache.axis2.databinding.ADBException("UPPER_VALUE cannot be null!!");
                                    }
                                    elementList.add(localUPPER_VALUE);
                                
                            elementList.add(new javax.xml.namespace.QName("",
                                                                      "CAL_FLAG"));
                            
                            
                                    if (localCAL_FLAG==null){
                                         throw new org.apache.axis2.databinding.ADBException("CAL_FLAG cannot be null!!");
                                    }
                                    elementList.add(localCAL_FLAG);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ZMTR_CODE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ZMTR_CODE object =
                new ZMTR_CODE();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ZMTR_CODE".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ZMTR_CODE)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","MANDT").equals(reader.getName())){
                                
                                                object.setMANDT(Clnt3.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","ZCZ").equals(reader.getName())){
                                
                                                object.setZCZ(Char25.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","VBELN").equals(reader.getName())){
                                
                                                object.setVBELN(Char10.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","POSNR").equals(reader.getName())){
                                
                                                object.setPOSNR(Numeric6.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","STD").equals(reader.getName())){
                                
                                                object.setSTD(Char1.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","LCN").equals(reader.getName())){
                                
                                                object.setLCN(Numeric4.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CODE").equals(reader.getName())){
                                
                                                object.setCODE(Char10.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","MTR_CODE").equals(reader.getName())){
                                
                                                object.setMTR_CODE(Char10.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","MTR_NAME").equals(reader.getName())){
                                
                                                object.setMTR_NAME(Char50.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","FORMULA").equals(reader.getName())){
                                
                                                object.setFORMULA(Char50.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","LOWER_SIGN").equals(reader.getName())){
                                
                                                object.setLOWER_SIGN(Char2.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","LOWER_VALUE").equals(reader.getName())){
                                
                                                object.setLOWER_VALUE(Char17.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","UPPER_SIGN").equals(reader.getName())){
                                
                                                object.setUPPER_SIGN(Char2.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","UPPER_VALUE").equals(reader.getName())){
                                
                                                object.setUPPER_VALUE(Char17.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("","CAL_FLAG").equals(reader.getName())){
                                
                                                object.setCAL_FLAG(Char1.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
            private  org.apache.axiom.om.OMElement  toOM(ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHI param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHI.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHIResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHIResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHI param, boolean optimizeContent)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHI.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             


        /**
        *  get the default envelope
        */
        private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){
        return factory.getDefaultEnvelope();
        }


        private  java.lang.Object fromOM(
        org.apache.axiom.om.OMElement param,
        java.lang.Class type,
        java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault{

        try {
        
                if (ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHI.class.equals(type)){
                
                           return ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHI.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHIResponse.class.equals(type)){
                
                           return ZWEBS_ZCAIZHIServiceStub.ZWEBS_ZCAIZHIResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
        } catch (java.lang.Exception e) {
        throw org.apache.axis2.AxisFault.makeFault(e);
        }
           return null;
        }



    
   }
   